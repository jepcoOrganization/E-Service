//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace T
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="T.IssueSoap")]
    public interface IssueSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ADOUMapping_SelectGroupIDByOUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ADOUMapping_SelectGroupIDByOUIDAsync(int OUID, int DomainID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDepartmentByDepartmentsName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetDepartmentByDepartmentsNameAsync(int BranchID, string DepartmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetJobTiTleByTiTleName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetJobTiTleByTiTleNameAsync(int BranchID, string Title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserIDFromUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetUserIDFromUserEmailAsync(string UserEmail, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGroupIDThatMatchesSpecificGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetGroupIDThatMatchesSpecificGroupAsync(string GroupName, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSiteBySiteName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetSiteBySiteNameAsync(int BranchID, string SiteName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGroupInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetGroupInfoAsync(int BranchID, int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EmployeeInfo_UpdateADInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task EmployeeInfo_UpdateADInfoAsync(int UserID, int BranchID, string FirstName, string SecondName, string ThirdName, string LastName, int GroupID, int DepartmentID, string Tel, string Email, string Mobile, int JobTitleID, int ManagerID, int SiteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EmployeeInfo_UpdateStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task EmployeeInfo_UpdateStatusAsync(int UserID, int BranchID, int StatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ADMappingInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task ADMappingInsertAsync(int UserID, int BranchID, string UserSID, int DomainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ADIntegrationSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ADIntegrationSelectAsync(int BranchID, int DomainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ADIntegrationSelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ADIntegrationSelectAllAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PAScheduleTime_SelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PAScheduleTime_SelectAllAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueFollowUp_Insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueFollowUp_InsertAsync(int UserID, int BranchID, int IssueID, System.DateTime FollowUpDate, string FollowUpNote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PAScheduleIssuedSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task PAScheduleIssuedSaveAsync(System.DateTime SubmitDate, int BranchID, int IssueID, int ScheduleIssueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PAScheduleIssued_SelectBasedOnMonth", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PAScheduleIssued_SelectBasedOnMonthAsync(int ScheduleIssueID, int BranchID, System.DateTime SubmitDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueHistorySave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueHistorySaveAsync(int IssueID, int BranchID, int ActionID, System.DateTime ActionDate, string ActionTextEn, string ActionTextAr, int ActionByUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllPASchadualeInfoBySchadualID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllPASchadualeInfoBySchadualIDAsync(int BranchID, int ScheduleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoSelectAsync(int IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPASubmittedIssue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetPASubmittedIssueAsync(int ScheduleIssueID, int BranchID, System.DateTime SubmitDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ADMapping_Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task ADMapping_DeleteAsync(int UserID, int BranchID, int DomainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_ShareLocation_GetOpenAndUnassignedRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ShareLocation_GetOpenAndUnassignedRequestsAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_ShareLocation_Integration_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ShareLocation_Integration_selectAllAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_ShareLocation_SaveDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_ShareLocation_SaveDetailsAsync(string Refcode, string Latitude, string Longitude, string ServedCell, string BuildingNumber, string FloorNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_AutoResolve_Integration_GetOpenRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_AutoResolve_Integration_GetOpenRequestsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CloseCategory_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CloseCategory_SelectAsync(long BranchID, long CloseCategoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueStatistics_updateCloseReason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueStatistics_updateCloseReasonAsync(long IssueID, int BranchID, int CloserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueStatistics_updateCloseCategory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueStatistics_updateCloseCategoryAsync(long IssueID, int BranchID, int CloseCategoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_Survey_GetOpenAndUnassignedRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_Survey_GetOpenAndUnassignedRequestsAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_Survey_Integration_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_Survey_Integration_selectAllAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_Survey_SaveDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_Survey_SaveDetailsAsync(string Refcode, bool IsClosed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3Settings_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3Settings_selectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3Settings_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3Settings_selectAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3MailHistory_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3MailHistory_selectAsync(string MailID, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3MailHistory_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> Pop3MailHistory_insertAsync(string MailID, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserIDFromEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetUserIDFromEmailAsync(string Email, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDivisionDataMaping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetDivisionDataMapingAsync(string Company_Code, string Branch_Code, int BranchID, string Department_Code, string Section_code, string System_code, int TypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUnitDataMapingDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetUnitDataMapingDetailsAsync(string Company_Code, string Branch_Code, int BranchID, string Department_Code, string Section_code, int TypeID, string Division_code, string System_code);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerUserIDFromEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.GetCustomerUserIDFromEmailResponse> GetCustomerUserIDFromEmailAsync(T.GetCustomerUserIDFromEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectIDByAccountID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetProjectIDByAccountIDAsync(int AccountID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountIDFromEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetAccountIDFromEmailAsync(string Email, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendAutomaticReplyClosedMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendAutomaticReplyClosedMessageAsync(long IssueID, int BranchID, int ProjectID, string SenderEmail, string Refcode, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3KeywordSettings_SelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3KeywordSettings_SelectAllAsync(int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3KeywordSettings_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3KeywordSettings_SelectAsync(int KeywordID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Pop3TrustedDomains_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3TrustedDomains_selectAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JEPCO_Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> JEPCO_LoginAsync(string UserName, string Password, string CompanyCode, string BranchCode, string Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JEPCO_Logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task JEPCO_LogoutAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JEPCO_ViewRequests_Parents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> JEPCO_ViewRequests_ParentsAsync(int UserID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JEPCO_ViewRequests_Childs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> JEPCO_ViewRequests_ChildsAsync(long IssueID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JEPCO_IssueSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> JEPCO_IssueSaveAsync(int BranchID, string RequesterMobile, string RequesterName, string RequesterTel, int ProjectID, int ServiceID, int CategoryID, int SubCategoryID, int SubItemID, string IssueTitle, string IssueDescription, int FailureTypeID, string AttachName, string AttachValue, string AdditionalFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_GetNationalities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetNationalitiesAsync(int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_GetCountries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetCountriesAsync(int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_GetCountryCities", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetCountryCitiesAsync(int CountryID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_UpdateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> MOPSD_UpdateUserAsync(string UserName, int NationalityID, string FullName, string Email, int CountryID, int CityID, string Address, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_RegisterUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> MOPSD_RegisterUserAsync(string UserName, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_ConfirmUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> MOPSD_ConfirmUserAsync(string UserName, int Lang, string ConfirmationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_GetRecordTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetRecordTypesAsync(int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_GetProjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetProjectsAsync(string SearchText, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_GetProjectServices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetProjectServicesAsync(int ProjectID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_NewRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> MOPSD_NewRequestAsync(string UserName, int RecordTypeID, int ProjectID, int ServiceID, string Title, string Description, string AttachName, string AttachValue, string Latitude, string Longitude, string Address, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_ViewRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_ViewRequestsAsync(string UserName, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_RequestInquiry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_RequestInquiryAsync(string UserName, string Refcode, int Lang, int RecordTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MOPSD_RequestRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> MOPSD_RequestRateAsync(string UserName, long IssueID, int Rate, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestReopen", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task RequestReopenAsync(int UserID, long IssueID, int BranchID, int Lang, string Reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_NewRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_NewRequestAsync(
                    string ClientMSISDN, 
                    string ClientName, 
                    string UserName, 
                    int RequestTypeID, 
                    int ProjectID, 
                    int ServiceID, 
                    int CategoryID, 
                    int SubCategoryID, 
                    int SubItemID, 
                    string Title, 
                    string Description, 
                    int ImpactID, 
                    int UrgencyID, 
                    int PriorityID, 
                    string Attachments, 
                    string AdditionalFields, 
                    int Lang, 
                    bool EnableShareLocation, 
                    string ShareLocationOtherMobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_NewRequestAttachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_NewRequestAttachmentAsync(string UserName, long IssueID, string AttachName, string AttachValue, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendAttachmentEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendAttachmentEmailAsync(long IssueID, int BranchID, string AttachPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_UpdateRequestDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_UpdateRequestDescriptionAsync(string UserName, long IssueID, string Description, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_ViewRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ViewRequestsAsync(string UserName, string Refcode, string ClientMSISDN, string Description, int StatusID, System.DateTime FromCreateDate, System.DateTime ToCreateDate, string AdditionalFieldsOnView, string AdditionalFieldsFilters, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_ViewRequests_AllFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ViewRequests_AllFieldsAsync(string UserName, string Refcode, string ClientMSISDN, string Description, int StatusID, System.DateTime FromCreateDate, System.DateTime ToCreateDate, string AdditionalFieldsOnView, string AdditionalFieldsFilters, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_RequestAttachments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_RequestAttachmentsAsync(long IssueID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_RequestNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_RequestNotesAsync(long IssueID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_NewRequestNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_NewRequestNoteAsync(string UserName, long IssueID, string NoteTitle, string NoteDetails, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_RequestReassignToPreviousAssignee", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_RequestReassignToPreviousAssigneeAsync(string UserName, long IssueID, string ReassignReason, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersReports_selectSendReports", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersReports_selectSendReportsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersReports_UpdateLastNotificationDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task UsersReports_UpdateLastNotificationDateAsync(int ReportID, int UserID, int BranchID, System.DateTime LastNotificationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMaintenanceContractEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<object> GetMaintenanceContractEmailBodyAsync(int ContactID, int UserID, int BranchID, int ReportSourceID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReportTabularEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetReportTabularEmailBodyAsync(int ReportID, int UserID, int BranchID, int ReportSourceID, string OrderByID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetReportGraphicalEmailBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetReportGraphicalEmailBodyAsync(int ReportID, int UserID, int BranchID, int ReportSourceID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MenaPortal_MyRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task MenaPortal_MyRequestsAsync(string Employee_Code, string Company_Code, string Branch_Code, int Lang, int ProjectID, int StatusID, string FromDate, string ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckLoginDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task CheckLoginDetailsAsync(string UserName, string Password, string CompanyCode, string BranchCode, string Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueHistory_CheckRequestWithNoAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueHistory_CheckRequestWithNoActionAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSystemParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetSystemParametersAsync(object BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuildReminderMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> BuildReminderMessageAsync(string[] dic, string From, string Refcode, string Title, string Reciepient, string project, string Description, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersReportsFieldsCCs_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersReportsFieldsCCs_selectAsync(int ReportID, int BranchID, int ReportUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersReports_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersReports_selectAsync(int ReportID, int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdditionalFieldValues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAdditionalFieldValuesAsync(int IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateContractItemStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task UpdateContractItemStatusAsync(int ContractID, int ItemID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Zain_ChangeStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Zain_ChangeStatusAsync(string UserName, long IssueID, int branchID, int IssueStatusID, string ActionTaken, bool IsAssignToGroup, int AssignTo, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueFlowHistory_Save", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueFlowHistory_SaveAsync(int FlowID, long IssueID, int BranchID, int ActionByUserID, int ActionID, bool isCompleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueFlowHistory_GetCurrent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> IssueFlowHistory_GetCurrentAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersRulesTimeEscalationHistory_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task UsersRulesTimeEscalationHistory_insertAsync(int RuleID, int UserID, int BranchID, long IssueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TimeDiff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> TimeDiffAsync(string Time1, string Time2, string BreakStartTimeStr, string BreakEndTimeStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSLADate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<System.DateTime> GetSLADateAsync(System.DateTime StartDate, int TotalValue, T.ArrayOfXElement ds, int TotalWorkingHour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueAssignedToEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueAssignedToEmailAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueRequestorEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetIssueRequestorEmailAsync(long IssueID, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueCreaterEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetIssueCreaterEmailAsync(long IssueID, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectOwnerEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetProjectOwnerEmailAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueRequestorMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetIssueRequestorMobileAsync(long IssueID, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetUserMobileAsync(int UserID, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueAssignedToMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueAssignedToMobileAsync(long IssueID, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetIssueProjectAsync(int IssueID, int BranchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllOpenRequestsHaveSLA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllOpenRequestsHaveSLAAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLAEscalations_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SLAEscalations_selectAsync(int SLAID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueSLAInfo_CheckBreach", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueSLAInfo_CheckBreachAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoSLAEscalationsHistory_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoSLAEscalationsHistory_selectAsync(long IssueID, int BranchID, int SLAID, int EscalationID, int EscalationTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoSLAEscalationsHistory_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueInfoSLAEscalationsHistory_insertAsync(long IssueID, int BranchID, int SLAID, int EscalationID, int EscalationTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLAGeneralInfo_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGeneralInfo_selectAsync(int SLAID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckIssueResponseFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<bool> CheckIssueResponseFlagAsync(double IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckIssueStatusIsOpen", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<bool> CheckIssueStatusIsOpenAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckEmailTemplateIsActive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<bool> CheckEmailTemplateIsActiveAsync(int TemplateID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckEmailTemplateIsCustomize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<bool> CheckEmailTemplateIsCustomizeAsync(int TemplateID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmailTemplateSubjectByIssueID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetEmailTemplateSubjectByIssueIDAsync(int TemplateID, long IssueID, int BranchID, int Lang, int ID1, int ID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmailTemplateBodyByIssueID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetEmailTemplateBodyByIssueIDAsync(int TemplateID, long IssueID, int BranchID, int Lang, int ID1, int ID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmailTemplateSubjectByContractID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetEmailTemplateSubjectByContractIDAsync(int TemplateID, int ContractID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmailTemplateBodyByContractID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetEmailTemplateBodyByContractIDAsync(int TemplateID, int ContractID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuildFinalCloseMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> BuildFinalCloseMessageAsync(int IssueID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUsersRule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersRuleAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BranchEmailSettings_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> BranchEmailSettings_selectAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersRulesProjects_selectProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRulesProjects_selectProjectAsync(int RuleID, int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckRules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task CheckRulesAsync(string[] dic, T.ArrayOfXElement dsProjects, int RuleID, int BranchID, int UserID, int CompareTypeID, int CompareValue, int TemplateID, bool AssignToGroup, string RuleMessage, string RuleDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueFollowUp_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueFollowUp_selectAllAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ScheduleDetails_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ScheduleDetails_SelectAsync(int ScheduleID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSLAEscalationToEmails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAEscalationToEmailsAsync(int SLAID, int BranchID, int EscalationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSLAEscalationToMobiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAEscalationToMobilesAsync(int SLAID, int BranchID, int EscalationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ContractsGeneralInformation_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ContractsGeneralInformation_selectAsync(int ContractID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetContractNotifyEmployeesEmails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractNotifyEmployeesEmailsAsync(int ContractID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetContractNotifyAccountsEmails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractNotifyAccountsEmailsAsync(int ContractID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ContractItems_UpdateLastNotificationDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task ContractItems_UpdateLastNotificationDateAsync(int ItemID, int ContractID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ContractItems_UpdateStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task ContractItems_UpdateStatusAsync(int StatusID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ContractItems_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ContractItems_selectAsync(int ItemID, int ContractID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetContractItemsExcedToday", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractItemsExcedTodayAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetContractsBeforeDaysValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractsBeforeDaysValueAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMGeneralInfo_SelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PMGeneralInfo_SelectAllAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSystemParameter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetSystemParameterAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfo_UpdateSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueInfo_UpdateSourceAsync(long IssueID, int BranchID, int IncidentSourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfo_UpdateDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueInfo_UpdateDescriptionAsync(long IssueID, int BranchID, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCRWorkflowTaskEscalations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetCRWorkflowTaskEscalationsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUsersGroupEmails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersGroupEmailsAsync(int GroupID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WorkflowTaskEscalationsHistory_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task WorkflowTaskEscalationsHistory_insertAsync(int NotificationID, int TaskID, int PhaseID, int WorkflowID, int BranchID, int CRID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WorkflowTaskEscalationsHistory_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> WorkflowTaskEscalationsHistory_selectAsync(int NotificationID, int TaskID, int PhaseID, int WorkflowID, int BranchID, int CRID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CRWorkflowTaskNotificationBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> CRWorkflowTaskNotificationBodyAsync(int WorkFlowID, int CRID, int lang, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendIssueSimpleModeNotify", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendIssueSimpleModeNotifyAsync(string[] dic, string Project, string Title, string Description, string Priority, string ExpDate, string dir, int BranchID, int ProjectID, string RequestedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendEmailSimpleMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendEmailSimpleModeAsync(int IssueID, int ProjectID, int UserID, int BranchID, int Language, string Title, string Desc, string[] dic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendIssueFullModeNotify", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendIssueFullModeNotifyAsync(long IssueID, int BranchID, int ProjectID, int Lang, T.MailPriority Priority, string[] dic, string RootPath, bool IsNewRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllIssueShouldbeClosedPerProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllIssueShouldbeClosedPerProjectAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllIssueShouldbeClosedPerProject_RejectedCancelled", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllIssueShouldbeClosedPerProject_RejectedCancelledAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllProjectHaveAutoCloseSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllProjectHaveAutoCloseSettingsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllProjectHaveAutoCloseSettings_RejectedCancelled", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllProjectHaveAutoCloseSettings_RejectedCancelledAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectIssueService_selectALL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectIssueService_selectALLAsync(long projectID, int BranchID, int LanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectServicesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectServicesListAsync(int UserID, long ProjectID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServiceTypesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetServiceTypesListAsync(int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectServicesListByServiceType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectServicesListByServiceTypeAsync(int UserID, long ProjectID, int BranchID, int Lang, int ServiceTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLACheckForDateWithBusinessTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<bool> SLACheckForDateWithBusinessTimeAsync(System.DateTime Date1, int ScheduleID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuildPMUserTaskNotifyBody", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> BuildPMUserTaskNotifyBodyAsync(string Employee, string AssetDesc, string Time, int BranchID, int Lang, string Note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllSurveyHaveAutoSending", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllSurveyHaveAutoSendingAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSurvey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendSurveyAsync(int SurveyID, int BranchID, int UserID, int Lang, string dir, long IssueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueRequestorID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetIssueRequestorIDAsync(long IssueID, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SurveyGeneralInformation_selectByProjectID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SurveyGeneralInformation_selectByProjectIDAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersSurveyCounter_save", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task UsersSurveyCounter_saveAsync(int UserID, int SurveyID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersSurveyCounter_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersSurveyCounter_selectAsync(int UserID, int SurveyID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersSurveyCounter_ResetCounter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task UsersSurveyCounter_ResetCounterAsync(int UserID, int BranchID, int SurveyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SurveyGeneralInformation_updateLastNotificationDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SurveyGeneralInformation_updateLastNotificationDateAsync(int SurveyID, int BranchID, System.DateTime LastNotificationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SurveyNotifyUsers_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SurveyNotifyUsers_selectAsync(int SurveyID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SurveyNotifyGroups_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SurveyNotifyGroups_selectAsync(int SurveyID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGroupUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetGroupUsersAsync(int GroupID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCompanyInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetCompanyInfoAsync(int Language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBranchList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetBranchListAsync(int CompanyID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllBranchIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllBranchIDsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BranchIntegrationSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> BranchIntegrationSelectAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MenaItechShortMazeMapping_selectCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MenaItechShortMazeMapping_selectCodeAsync(string Company_Code, string Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int ShortMaze_BranchID, int TypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MenaItechShortMazeMapping_Division_selectCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MenaItechShortMazeMapping_Division_selectCodeAsync(string Company_Code, string Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int TypeID, int BranchID, string Mena_DivisionCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MenaItechShortMazeMapping_Unit_selectCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> MenaItechShortMazeMapping_Unit_selectCodeAsync(string Company_Code, string Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int TypeID, int BranchID, string Mena_DivisionCode, string Mena_UnitCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SavePayCodeTables", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SavePayCodeTablesAsync(int TableID, int Code, string EnDesc, string ArDesc, string Prefix, int BranchID, int id, int ImageID, string ImageUrl, bool idBol, int id2, int id3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/users_updatelogo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task users_updatelogoAsync(int UserID, int BranchID, string Logo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMaxCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetMaxCodeAsync(int TableID, int branchID, int ID, int ID2, int ID3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveMapping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SaveMappingAsync(string Mena_Company_Code, string Mena_Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int ShortMaze_BranchID, int ShortMaze_MajorCode, int ShortMaze_MinorCode, int TypeID, string Mena_DivisionCode, string Mena_UnitCode, int ShortMaze_DivisionCode, int ShortMaze_UnitCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserGroupIDFromUserID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetUserGroupIDFromUserIDAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserPasswordFromUserID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetUserPasswordFromUserIDAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetUserInfoAsync(int BranchID, int UserID, int lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueAssigneeTeamLeaders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueAssigneeTeamLeadersAsync(long IssueID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> SaveUserInfoAsync(
                    int UserID, 
                    int BranchID, 
                    int CompanyID, 
                    string Username, 
                    string password, 
                    int UserTypeID, 
                    int MustChangePassword, 
                    int CannotChangePassword, 
                    int PasswordNeverExpires, 
                    System.DateTime RegistrationDate, 
                    int StatusID, 
                    string Remark, 
                    string FstNameEn, 
                    string SndNameEn, 
                    string ThrdNameEn, 
                    string LastNameEn, 
                    string fstNameAr, 
                    string sndNameAr, 
                    string ThrdNameAr, 
                    string LstNameAr, 
                    int GroupID, 
                    int SiteID, 
                    int DepartmentID, 
                    int SectionID, 
                    int GenderID, 
                    int ReligionID, 
                    int CountryID, 
                    int CityID, 
                    int TimeZoneFactorID, 
                    string tel, 
                    string Email, 
                    string Mobile, 
                    int isadmin, 
                    int NationalityID, 
                    bool CanAccessAllProjects, 
                    bool MemberOfAllProjects, 
                    bool NotifyBySimpleMode, 
                    bool Resticted, 
                    bool isTeamLeader, 
                    int OperationID, 
                    bool isNotifiedForKE, 
                    bool KEAuther, 
                    bool KEPublisher, 
                    bool KBAuther, 
                    bool KBPublisher, 
                    long EmployeeNo, 
                    string Address, 
                    int SystemUserTypeID, 
                    int OfficeType, 
                    string FloorNo, 
                    string OfficeNo, 
                    bool MemberInIncTeam, 
                    bool MemberInPbmTeam, 
                    bool MemberInChngTeam, 
                    bool MemberInReleaseTeam, 
                    bool FullMode, 
                    bool VisualMode, 
                    bool SimpleMode, 
                    bool MainPageView, 
                    int DivisionID, 
                    int UnitID, 
                    bool CanSynchAD, 
                    bool CanAccessCM, 
                    int ManagerID, 
                    bool isDataEntryUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BranchDefaultSettingsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> BranchDefaultSettingsSelectAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserIDFromUserName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetUserIDFromUserNameAsync(string UserName, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GroupInfo_UpdateGroupName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task GroupInfo_UpdateGroupNameAsync(int GroupID, int BranchID, string GroupNameEn, string GroupNameAr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGroupIDByGroupName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetGroupIDByGroupNameAsync(int BranchID, string GroupNameEn, string GroupNameAr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGroupName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetGroupNameAsync(int GroupID, int BranchID, int lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveGroupInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> SaveGroupInfoAsync(
                    int GroupID, 
                    int BranchID, 
                    string GroupNameEn, 
                    string GroupNameAr, 
                    bool IsAdmin, 
                    int OperationID, 
                    bool UseSimpleEntryMode, 
                    bool InactivateMembers, 
                    bool AccessAllProjects, 
                    bool MemberInAllProjects, 
                    bool NotifiedBySimpleModeIssue, 
                    bool isRestricted, 
                    int SystemUserType, 
                    bool MemberInIncTeam, 
                    bool MemberInPbmTeam, 
                    bool MemberInChngTeam, 
                    bool MemberInReleaseTeam, 
                    bool FullMode, 
                    bool VisualMode, 
                    bool SimpleMode, 
                    bool MainPage, 
                    int OtherGroupID1, 
                    int OtherGroupID2, 
                    int OtherGroupID3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSystemUserTypeIDFromUserID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetSystemUserTypeIDFromUserIDAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUsersList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersListAsync(int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectSettingsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectSettingsSelectAsync(int ProjectID, int BranchID);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckProjectAutoAssignAndReturnAssignee", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.CheckProjectAutoAssignAndReturnAssigneeResponse> CheckProjectAutoAssignAndReturnAssigneeAsync(T.CheckProjectAutoAssignAndReturnAssigneeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectSettings_GetAssigneeBasedOnRR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> ProjectSettings_GetAssigneeBasedOnRRAsync(int ProjectID, int GroupID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RecordType_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> RecordType_SelectAsync(int Lang, int TypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueSubCategoryItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueSubCategoryItemsAsync(int SubCategoryID, int MajorCategoryID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BranchMandatoryFields_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> BranchMandatoryFields_selectAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectBranchAccounts_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectBranchAccounts_SelectAsync(int ProjectID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckUserPermission", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CheckUserPermissionAsync(int BranchID, int PortalID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLAGroupInternalRules_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGroupInternalRules_selectAllAsync(int GroupID, int SLAID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDurationPerMinutesByIssueID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetDurationPerMinutesByIssueIDAsync(System.DateTime StartDate, System.DateTime EndDate, long IssueID, int BranchID, bool IsAssignToGroup, int AssignToID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLAGroupInternalEscalations_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGroupInternalEscalations_selectAsync(int RuleID, int GroupID, int SLAID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSLAGroupInternalEscalationsToEmails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAGroupInternalEscalationsToEmailsAsync(int RuleID, int GroupID, int SLAID, int BranchID, int EscalationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSLAGroupInternalEscalationsToMobiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAGroupInternalEscalationsToMobilesAsync(int RuleID, int GroupID, int SLAID, int BranchID, int EscalationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoOLAEscalationsHistory_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueInfoOLAEscalationsHistory_insertAsync(long IssueID, int BranchID, int RuleID, int GroupID, int SLAID, int EscalationID, int EscalationTypeID, int BreachedAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoOLAEscalationsHistory_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoOLAEscalationsHistory_selectAsync(long IssueID, int BranchID, int RuleID, int GroupID, int SLAID, int EscalationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SLAGroupsFilters_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGroupsFilters_selectAsync(int GroupID, int SLAID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueOLA_Details", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueOLA_DetailsAsync(long IssueID, int BranchID, bool IsAssignToGroup, int AssignToID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResetStuckedIssues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task ResetStuckedIssuesAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSMSToUser1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendSMSToUser1Async(int BranchID, int UserID, string Mobile, long IssueID, int SMSID, string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task SendSMSAsync(long IssueID, int StatusID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveBranchAccountUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> SaveBranchAccountUserAsync(
                    int AccountID, 
                    int BranchID, 
                    int CompanyID, 
                    int UserID, 
                    string Username, 
                    string Password, 
                    int MustChangePassword, 
                    int CannotChangePassword, 
                    int PasswordNeverExpires, 
                    string remarks, 
                    System.DateTime Regdate, 
                    int UserTypeID, 
                    int UserStatusID, 
                    string FirstNameEn, 
                    string SecondNameEn, 
                    string ThirdNameEn, 
                    string LastNameEn, 
                    string FirstNameAr, 
                    string SecondNameAr, 
                    string ThirdNameAr, 
                    string LastNameAr, 
                    int CountryID, 
                    int CityID, 
                    int ReligionID, 
                    int NationalityID, 
                    string Tel, 
                    string Mobile, 
                    string Email, 
                    int OperationID, 
                    bool CanNotifyIssue, 
                    int JobTitleID, 
                    string Address, 
                    bool IsVIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllPausedAndNotSentIssueIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllPausedAndNotSentIssueIDsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssuePauseHistory_updateIsSent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssuePauseHistory_updateIsSentAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssuePauseHistory_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssuePauseHistory_selectAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetResolvedWithNoRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetResolvedWithNoRateAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoRateNotifications_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueInfoRateNotifications_insertAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ADOUMapping_SelectGrid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ADOUMapping_SelectGridAsync(int DomainID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSimpleModeFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<bool> GetSimpleModeFlagAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServerName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetServerNameAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogError", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task LogErrorAsync(string spname, string ErrDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MenaITech_ReassignToFirstAssigneeWithPausedStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> MenaITech_ReassignToFirstAssigneeWithPausedStatusAsync(string Refcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ConvertStreamToByteBuffer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ConvertStreamToByteBufferResponse> ConvertStreamToByteBufferAsync(T.ConvertStreamToByteBufferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WriteBinarFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.WriteBinarFileResponse> WriteBinarFileAsync(T.WriteBinarFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserIDFromDomainInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetUserIDFromDomainInformationAsync(string UserName, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<long> IssueInfoSaveAsync(
                    long IssID, 
                    int BranchID, 
                    int ProjectID, 
                    int SeverityID, 
                    int PriorityID, 
                    int IssueTypeID, 
                    int CreatedByUserID, 
                    int AssignToID, 
                    string issuetitle, 
                    string issueDescription, 
                    int CategoryID1, 
                    int CategoryID2, 
                    int CategoryID3, 
                    int CategoryID4, 
                    string SubmitDate, 
                    string ExpectedSolveDate, 
                    bool AddtoWatchList, 
                    int IssueStatusID, 
                    int IssueSubCategoryID, 
                    bool IsAssignToGroup, 
                    bool IsAccount, 
                    int AccountID, 
                    int ServiceID, 
                    int RecordTypeID, 
                    int PublishToKB, 
                    int RequestedByTypeID, 
                    int RequestedByUserID, 
                    int RequestedByAccountID, 
                    int AssetsType, 
                    int AssetsID, 
                    int ImpactID, 
                    int SubItemID, 
                    int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueAttachmentsPAInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueAttachmentsPAInsertAsync(long IssueID, long NewIssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_AlertLog_Insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task CM_AlertLog_InsertAsync(int AlertID, int BranchID, System.DateTime ActionDate, string ActionTextEn, string ActionTextAr, int ActionByUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetListOfValues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetListOfValuesAsync(int ListID, int BranchID, int Lang, int filter1, int filter2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_GetProjectFromComputerGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_GetProjectFromComputerGroupAsync(int BranchID, int ComputerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectListForInternalsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectListForInternalsSelectAsync(int UserID, int BranchID, int Lang, int StatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersTemplate_SelectByTemplateID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersTemplate_SelectByTemplateIDAsync(int TemplateID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_AlertIncidentDetails_SelectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_AlertIncidentDetails_SelectAllAsync(int AlertID, int BranchID, bool IsService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDataSetFromListOfValuesTables", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetDataSetFromListOfValuesTablesAsync(int TableID, int lang, int ID, int ID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectListForAccountSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectListForAccountSelectAsync(int AccountID, int UserID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BranchAccountsServices_selectHead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> BranchAccountsServices_selectHeadAsync(int AccountID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getIssueSubCategories", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> getIssueSubCategoriesAsync(int BranchID, int Lang, int MajorCategoryID, int orderby, int OrderByType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDataSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetDataSetAsync(string str1, T.CommandType type, T.SqlParameter[] parms);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueSimpleModeSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> IssueSimpleModeSaveAsync(int BranchID, string IssueTitle, string IssueDescription, int PriorityID, string ExpectedSolveDate, string SubmitDate, int CreateByUserID, int ProjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueSimpleModeAdditionalFields_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueSimpleModeAdditionalFields_insertAsync(int FieldID, int IssueID, int BranchID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetProjectOwnerAsync(int ProjectID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueHistoryInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueHistoryInsertAsync(long IssueID, int BranchID, int ActionID, string ActionDate, string ActionTextEn, string ActionTextAr, int ActionByUserID, string ActionTimeDuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueSimpleModeAttachmentsSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueSimpleModeAttachmentsSaveAsync(int IssueID, int BranchID, string FileName, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueGetRefCodeFromID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> IssueGetRefCodeFromIDAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueNoteHistoryInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueNoteHistoryInsertAsync(long IssueID, int BranchID, int UserID, string title, string usernote, System.DateTime notedate, System.DateTime notetime, bool VisibleToExternals);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueIDFromIssueRefCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<long> GetIssueIDFromIssueRefCodeAsync(string RefCode, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserPortalSettingsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UserPortalSettingsSelectAsync(int branchID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssuesMustAddToOutlook_Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssuesMustAddToOutlook_DeleteAsync(long IssueId, int userId, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResetFollowUpFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task ResetFollowUpFlagAsync(int FollowUpID, long IssueID, int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetIssueStatusAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetIssueLanguageAsync(long IssueID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Crystelcall_GetAskRequestStatusAndActionTaken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Crystelcall_GetAskRequestStatusAndActionTakenAsync(string Refcode, string Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Crystelcall_NewAskRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> Crystelcall_NewAskRequestAsync(string CountryName, string Name, string Email, string Mobile, string EntityName, string TypeName, string Message, string FileName, string FileValue, string Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueChangeStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueChangeStatusAsync(long IssueID, int BranchID, int newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueFixedByUserIDUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueFixedByUserIDUpdateAsync(long IssueID, int branchID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueSolvingHistoryInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueSolvingHistoryInsertAsync(long IssueID, int BranchID, string ActionTaken, System.DateTime SolveDate, string Notes, int SolvedByUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssuesMustAddToOutlook_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssuesMustAddToOutlook_SelectAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueInfoForOutlookIntegration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueInfoForOutlookIntegrationAsync(long IssueId, int branchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoViewSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoViewSelectAsync(long IssueID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueNotesHistorySelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueNotesHistorySelectAsync(long IssueID, int BranchID, int Lang, int UserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueHistorySelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueHistorySelectAsync(long IssueID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueStatusDesc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetIssueStatusDescAsync(long issueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueStatisticsViewSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueStatisticsViewSelectAsync(int BranchID, long IssueID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoFixAndOpenDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoFixAndOpenDateAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServerUrlReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetServerUrlReportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersFollowUpToBeImportedToOutlook", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersFollowUpToBeImportedToOutlookAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueInfoForOutlookFollowUp_Select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoForOutlookFollowUp_SelectAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_GetComputerIDFromComputerName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> CM_GetComputerIDFromComputerNameAsync(string ComputerName, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersGeneralInfo_ComputerSystem_SelectInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfo_ComputerSystem_SelectInfoAsync(int ComputerID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectTeam", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectTeamAsync(int ProjectID, int BranchID, int Lang, int TeamID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectTeamGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectTeamGroupsAsync(int ProjectID, int BranchID, int Lang, int TeamID, int RequestorUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProjectIDFromIssueID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetProjectIDFromIssueIDAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueRecordTypeID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> GetIssueRecordTypeIDAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueChangeAssignTo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueChangeAssignToAsync(long IssueID, int BranchID, int AssignTo, bool IsAssignToGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueChangeRecordType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueChangeRecordTypeAsync(long IssueID, int BranchID, T.RecordTypes RecordTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueCopyToDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueCopyToDeleteAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueCopyToInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueCopyToInsertAsync(long IssueID, int BranchID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_PackageInfo_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_PackageInfo_selectAsync(int PackageID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckLoginInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CheckLoginInfoAsync(string Username, int serial, int SystemUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckLoginInfoWithNoDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> CheckLoginInfoWithNoDomainAsync(string Username, string Password, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserFullName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetUserFullNameAsync(int UserID, int branchID, int lang, int UserTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOperatingSystems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetOperatingSystemsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVendors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetVendorsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUsersGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersGroupsAsync(int BranchID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ADSettings_selectInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ADSettings_selectInfoAsync(int Lang, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_GetDomainPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> CM_GetDomainPasswordAsync(int DomainID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersGeneralInfo_SelectHead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfo_SelectHeadAsync(int DomainID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersGroupsMembersSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGroupsMembersSelectAsync(int GroupID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersGeneralInfoSelect_OS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfoSelect_OSAsync(int OSID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersGeneralInfoSelect_vendor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfoSelect_vendorAsync(int VendorID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ADSettings_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ADSettings_selectAsync(int DomainID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_GetComputerIDFromGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> CM_GetComputerIDFromGUIDAsync(int BranchID, int DomainID, string GUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_ComputersGeneralInfoSelect_ForPcs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfoSelect_ForPcsAsync(int DomainID, int BranchID, int lang, string ComputersStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_GetPackagesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_GetPackagesListAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_GetPackageVersionsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_GetPackageVersionsListAsync(int PackageID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_PackageVersionInfo_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_PackageVersionInfo_selectAsync(int PackageID, int VersionID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_AntivirusSettings_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_AntivirusSettings_selectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CM_SearchPcs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CM_SearchPcsAsync(int BranchID, string PCName, string IPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDataSetForCodesTables", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetDataSetForCodesTablesAsync(int TableID, int lang, int OrderByID, int OrderByType, int branchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VisualModeRulesselectHeader", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> VisualModeRulesselectHeaderAsync(int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDictionaryItemsWithIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetDictionaryItemsWithIDsAsync(int Lang, int[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VisualModeIssuesViewer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> VisualModeIssuesViewerAsync(int MajorID, int SubCategoryID, int Lang, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VisualModeRulesSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> VisualModeRulesSelectAsync(int BranchID, int RuleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVisualModeIssue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetVisualModeIssueAsync(int PreIssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DashboardsAreasInformation_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> DashboardsAreasInformation_selectAllAsync(int DashboardID, int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DashboardsAreasInformation_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> DashboardsAreasInformation_selectAsync(int AreaID, int DashboardID, int UserID, int BranchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DashboardsAreasInformation_GenerateSQLStatement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> DashboardsAreasInformation_GenerateSQLStatementAsync(int AreaID, int DashboardID, int UserID, int BranchId, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetChartAsync(int AreaID, int DashboardID, int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServerNameSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetServerNameSettingsAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueAdditionlFieldsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueAdditionlFieldsSelectAsync(int branchID, int Lang, int ProjectID, int ServiceID, int CategoryID, int SubCategoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueAdditionlFieldValuesSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> IssueAdditionlFieldValuesSelectAsync(int branchID, int fieldID, int lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueAdditionalFieldsInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueAdditionalFieldsInsertAsync(long IssueID, int BranchID, int FieldID, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueAttachmentsInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.IssueAttachmentsInsertResponse> IssueAttachmentsInsertAsync(T.IssueAttachmentsInsertRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllImpact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllImpactAsync(int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetImpactFromMatrix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetImpactFromMatrixAsync(int BranchID, int UrgencyID, int ImpactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CRM_GetListOfValues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> CRM_GetListOfValuesAsync(int ListID, int BranchID, int Lang, int filter1, int filter2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSystemDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetSystemDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PM_CheckNewTasks_Onwer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PM_CheckNewTasks_OnwerAsync(int Lang, int OwnerID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMUsersTasks_UpdateSynchOwnerStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task PMUsersTasks_UpdateSynchOwnerStatusAsync(int TaskID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PM_CheckNewTasks_User", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PM_CheckNewTasks_UserAsync(int Lang, int OwnerID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMUsersTasks_UpdateSynchUserStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task PMUsersTasks_UpdateSynchUserStatusAsync(int TaskID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetServiceCategories", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetServiceCategoriesAsync(int ServiceID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIssueDispatchInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueDispatchInfoAsync(long IssueID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersRuleNotifyEmailsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRuleNotifyEmailsSelectAsync(int RuleID, int BranchID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersRuleCCsEmailsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRuleCCsEmailsSelectAsync(int RuleID, int BranchID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmployeeFullNameFromUserID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetEmployeeFullNameFromUserIDAsync(int UserID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersRulesGroupsSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRulesGroupsSelectAsync(long RuleID, int BranchID, int GroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UsersRulesAssigneeSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRulesAssigneeSelectAsync(long RuleID, int BranchID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDictionaryItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string[]> GetDictionaryItemsAsync(int lang, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserEmailFromUserID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<string> GetUserEmailFromUserIDAsync(int UserID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetBranchInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> GetBranchInfoAsync(int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMGeneralInfo_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PMGeneralInfo_selectAsync(int PMID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMEmployeeAssets_selectView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PMEmployeeAssets_selectViewAsync(int PMID, int BranchID, int Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLastSynchDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task UpdateLastSynchDateAsync(int PMID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMUsersTasks_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<int> PMUsersTasks_insertAsync(int TaskID, int BranchID, int OwnerID, int UserID, int AssetID, string Note, System.DateTime Time, string Comments, int StatusID, int AssetType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMSelectedChecklistItems_selectAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task<T.ArrayOfXElement> PMSelectedChecklistItems_selectAllAsync(int PMID, int BranchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PMTasksChecklistItems_insert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task PMTasksChecklistItems_insertAsync(int TaskID, int BranchID, int ItemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IssueFollowUp_Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MarshalByRefObject))]
        System.Threading.Tasks.Task IssueFollowUp_DeleteAsync(int followUpID, int UserID, long IssueID, int BranchID);
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DbParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Stream))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class MarshalByRefObject
    {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SqlParameter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class DbParameter : MarshalByRefObject
    {
        
        private DbType dbTypeField;
        
        private ParameterDirection directionField;
        
        private bool isNullableField;
        
        private string parameterNameField;
        
        private byte precisionField;
        
        private byte scaleField;
        
        private int sizeField;
        
        private string sourceColumnField;
        
        private bool sourceColumnNullMappingField;
        
        private DataRowVersion sourceVersionField;
        
        private object valueField;
        
        public DbParameter()
        {
            this.directionField = ParameterDirection.Input;
            this.parameterNameField = "";
            this.sourceColumnField = "";
            this.sourceColumnNullMappingField = false;
            this.sourceVersionField = DataRowVersion.Current;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DbType DbType
        {
            get
            {
                return this.dbTypeField;
            }
            set
            {
                this.dbTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.ComponentModel.DefaultValueAttribute(ParameterDirection.Input)]
        public ParameterDirection Direction
        {
            get
            {
                return this.directionField;
            }
            set
            {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsNullable
        {
            get
            {
                return this.isNullableField;
            }
            set
            {
                this.isNullableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string ParameterName
        {
            get
            {
                return this.parameterNameField;
            }
            set
            {
                this.parameterNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public byte Precision
        {
            get
            {
                return this.precisionField;
            }
            set
            {
                this.precisionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public byte Scale
        {
            get
            {
                return this.scaleField;
            }
            set
            {
                this.scaleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int Size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string SourceColumn
        {
            get
            {
                return this.sourceColumnField;
            }
            set
            {
                this.sourceColumnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool SourceColumnNullMapping
        {
            get
            {
                return this.sourceColumnNullMappingField;
            }
            set
            {
                this.sourceColumnNullMappingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        [System.ComponentModel.DefaultValueAttribute(DataRowVersion.Current)]
        public DataRowVersion SourceVersion
        {
            get
            {
                return this.sourceVersionField;
            }
            set
            {
                this.sourceVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public object Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DbType
    {
        
        /// <remarks/>
        AnsiString,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Byte,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Double,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Int16,
        
        /// <remarks/>
        Int32,
        
        /// <remarks/>
        Int64,
        
        /// <remarks/>
        Object,
        
        /// <remarks/>
        SByte,
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        UInt16,
        
        /// <remarks/>
        UInt32,
        
        /// <remarks/>
        UInt64,
        
        /// <remarks/>
        VarNumeric,
        
        /// <remarks/>
        AnsiStringFixedLength,
        
        /// <remarks/>
        StringFixedLength,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ParameterDirection
    {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        ReturnValue,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DataRowVersion
    {
        
        /// <remarks/>
        Original,
        
        /// <remarks/>
        Current,
        
        /// <remarks/>
        Proposed,
        
        /// <remarks/>
        Default,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SqlParameter : DbParameter
    {
        
        private SqlCompareOptions compareInfoField;
        
        private string xmlSchemaCollectionDatabaseField;
        
        private string xmlSchemaCollectionOwningSchemaField;
        
        private string xmlSchemaCollectionNameField;
        
        private bool forceColumnEncryptionField;
        
        private int localeIdField;
        
        private SqlDbType sqlDbTypeField;
        
        private object sqlValueField;
        
        private string udtTypeNameField;
        
        private string typeNameField;
        
        private int offsetField;
        
        public SqlParameter()
        {
            this.forceColumnEncryptionField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SqlCompareOptions CompareInfo
        {
            get
            {
                return this.compareInfoField;
            }
            set
            {
                this.compareInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string XmlSchemaCollectionDatabase
        {
            get
            {
                return this.xmlSchemaCollectionDatabaseField;
            }
            set
            {
                this.xmlSchemaCollectionDatabaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string XmlSchemaCollectionOwningSchema
        {
            get
            {
                return this.xmlSchemaCollectionOwningSchemaField;
            }
            set
            {
                this.xmlSchemaCollectionOwningSchemaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string XmlSchemaCollectionName
        {
            get
            {
                return this.xmlSchemaCollectionNameField;
            }
            set
            {
                this.xmlSchemaCollectionNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool ForceColumnEncryption
        {
            get
            {
                return this.forceColumnEncryptionField;
            }
            set
            {
                this.forceColumnEncryptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int LocaleId
        {
            get
            {
                return this.localeIdField;
            }
            set
            {
                this.localeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public SqlDbType SqlDbType
        {
            get
            {
                return this.sqlDbTypeField;
            }
            set
            {
                this.sqlDbTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public object SqlValue
        {
            get
            {
                return this.sqlValueField;
            }
            set
            {
                this.sqlValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string UdtTypeName
        {
            get
            {
                return this.udtTypeNameField;
            }
            set
            {
                this.udtTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string TypeName
        {
            get
            {
                return this.typeNameField;
            }
            set
            {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public int Offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SqlCompareOptions
    {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        IgnoreCase = 2,
        
        /// <remarks/>
        IgnoreNonSpace = 4,
        
        /// <remarks/>
        IgnoreKanaType = 8,
        
        /// <remarks/>
        IgnoreWidth = 16,
        
        /// <remarks/>
        BinarySort = 32,
        
        /// <remarks/>
        BinarySort2 = 64,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SqlDbType
    {
        
        /// <remarks/>
        BigInt,
        
        /// <remarks/>
        Binary,
        
        /// <remarks/>
        Bit,
        
        /// <remarks/>
        Char,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        Decimal,
        
        /// <remarks/>
        Float,
        
        /// <remarks/>
        Image,
        
        /// <remarks/>
        Int,
        
        /// <remarks/>
        Money,
        
        /// <remarks/>
        NChar,
        
        /// <remarks/>
        NText,
        
        /// <remarks/>
        NVarChar,
        
        /// <remarks/>
        Real,
        
        /// <remarks/>
        UniqueIdentifier,
        
        /// <remarks/>
        SmallDateTime,
        
        /// <remarks/>
        SmallInt,
        
        /// <remarks/>
        SmallMoney,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Timestamp,
        
        /// <remarks/>
        TinyInt,
        
        /// <remarks/>
        VarBinary,
        
        /// <remarks/>
        VarChar,
        
        /// <remarks/>
        Variant,
        
        /// <remarks/>
        Xml,
        
        /// <remarks/>
        Udt,
        
        /// <remarks/>
        Structured,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        Time,
        
        /// <remarks/>
        DateTime2,
        
        /// <remarks/>
        DateTimeOffset,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class Stream : MarshalByRefObject
    {
        
        private long positionField;
        
        private int readTimeoutField;
        
        private int writeTimeoutField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long Position
        {
            get
            {
                return this.positionField;
            }
            set
            {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int ReadTimeout
        {
            get
            {
                return this.readTimeoutField;
            }
            set
            {
                this.readTimeoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int WriteTimeout
        {
            get
            {
                return this.writeTimeoutField;
            }
            set
            {
                this.writeTimeoutField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomerUserIDFromEmail", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCustomerUserIDFromEmailRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int BranchID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int AccountID;
        
        public GetCustomerUserIDFromEmailRequest()
        {
        }
        
        public GetCustomerUserIDFromEmailRequest(string Email, int BranchID, int AccountID)
        {
            this.Email = Email;
            this.BranchID = BranchID;
            this.AccountID = AccountID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomerUserIDFromEmailResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCustomerUserIDFromEmailResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int GetCustomerUserIDFromEmailResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int AccountID;
        
        public GetCustomerUserIDFromEmailResponse()
        {
        }
        
        public GetCustomerUserIDFromEmailResponse(int GetCustomerUserIDFromEmailResult, int AccountID)
        {
            this.GetCustomerUserIDFromEmailResult = GetCustomerUserIDFromEmailResult;
            this.AccountID = AccountID;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum MailPriority
    {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        High,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckProjectAutoAssignAndReturnAssignee", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckProjectAutoAssignAndReturnAssigneeRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ProjectID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int BranchID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int IssueTypeID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int ServiceID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int CategoryID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public int SubCategoryID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int SubItemID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public int RequesterID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public int CreatorID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=9)]
        public bool IsAssignToGroup;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=10)]
        public int AssignID;
        
        public CheckProjectAutoAssignAndReturnAssigneeRequest()
        {
        }
        
        public CheckProjectAutoAssignAndReturnAssigneeRequest(int ProjectID, int BranchID, int IssueTypeID, int ServiceID, int CategoryID, int SubCategoryID, int SubItemID, int RequesterID, int CreatorID, bool IsAssignToGroup, int AssignID)
        {
            this.ProjectID = ProjectID;
            this.BranchID = BranchID;
            this.IssueTypeID = IssueTypeID;
            this.ServiceID = ServiceID;
            this.CategoryID = CategoryID;
            this.SubCategoryID = SubCategoryID;
            this.SubItemID = SubItemID;
            this.RequesterID = RequesterID;
            this.CreatorID = CreatorID;
            this.IsAssignToGroup = IsAssignToGroup;
            this.AssignID = AssignID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckProjectAutoAssignAndReturnAssigneeResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckProjectAutoAssignAndReturnAssigneeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CheckProjectAutoAssignAndReturnAssigneeResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool IsAssignToGroup;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int AssignID;
        
        public CheckProjectAutoAssignAndReturnAssigneeResponse()
        {
        }
        
        public CheckProjectAutoAssignAndReturnAssigneeResponse(bool CheckProjectAutoAssignAndReturnAssigneeResult, bool IsAssignToGroup, int AssignID)
        {
            this.CheckProjectAutoAssignAndReturnAssigneeResult = CheckProjectAutoAssignAndReturnAssigneeResult;
            this.IsAssignToGroup = IsAssignToGroup;
            this.AssignID = AssignID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConvertStreamToByteBuffer", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ConvertStreamToByteBufferRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public T.Stream theStream;
        
        public ConvertStreamToByteBufferRequest()
        {
        }
        
        public ConvertStreamToByteBufferRequest(T.Stream theStream)
        {
            this.theStream = theStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConvertStreamToByteBufferResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ConvertStreamToByteBufferResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ConvertStreamToByteBufferResult;
        
        public ConvertStreamToByteBufferResponse()
        {
        }
        
        public ConvertStreamToByteBufferResponse(byte[] ConvertStreamToByteBufferResult)
        {
            this.ConvertStreamToByteBufferResult = ConvertStreamToByteBufferResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteBinarFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class WriteBinarFileRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int IssueID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string FileNamestr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int BranchID;
        
        public WriteBinarFileRequest()
        {
        }
        
        public WriteBinarFileRequest(int IssueID, byte[] FileName, string FileNamestr, int BranchID)
        {
            this.IssueID = IssueID;
            this.FileName = FileName;
            this.FileNamestr = FileNamestr;
            this.BranchID = BranchID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WriteBinarFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class WriteBinarFileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int WriteBinarFileResult;
        
        public WriteBinarFileResponse()
        {
        }
        
        public WriteBinarFileResponse(int WriteBinarFileResult)
        {
            this.WriteBinarFileResult = WriteBinarFileResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum CommandType
    {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        StoredProcedure,
        
        /// <remarks/>
        TableDirect,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum RecordTypes
    {
        
        /// <remarks/>
        Incident,
        
        /// <remarks/>
        Problem,
        
        /// <remarks/>
        Change,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IssueAttachmentsInsert", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class IssueAttachmentsInsertRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] File;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long IssueID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int BranchID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string AttachPath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string FileDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public int SubmitByUserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public string SubmitDate;
        
        public IssueAttachmentsInsertRequest()
        {
        }
        
        public IssueAttachmentsInsertRequest(byte[] File, long IssueID, int BranchID, string AttachPath, string FileName, string FileDescription, int SubmitByUserID, string SubmitDate)
        {
            this.File = File;
            this.IssueID = IssueID;
            this.BranchID = BranchID;
            this.AttachPath = AttachPath;
            this.FileName = FileName;
            this.FileDescription = FileDescription;
            this.SubmitByUserID = SubmitByUserID;
            this.SubmitDate = SubmitDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IssueAttachmentsInsertResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class IssueAttachmentsInsertResponse
    {
        
        public IssueAttachmentsInsertResponse()
        {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IssueSoapChannel : T.IssueSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class IssueSoapClient : System.ServiceModel.ClientBase<T.IssueSoap>, T.IssueSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public IssueSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(IssueSoapClient.GetBindingForEndpoint(endpointConfiguration), IssueSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IssueSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(IssueSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IssueSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(IssueSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IssueSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ADOUMapping_SelectGroupIDByOUIDAsync(int OUID, int DomainID, int BranchID)
        {
            return base.Channel.ADOUMapping_SelectGroupIDByOUIDAsync(OUID, DomainID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetDepartmentByDepartmentsNameAsync(int BranchID, string DepartmentName)
        {
            return base.Channel.GetDepartmentByDepartmentsNameAsync(BranchID, DepartmentName);
        }
        
        public System.Threading.Tasks.Task<int> GetJobTiTleByTiTleNameAsync(int BranchID, string Title)
        {
            return base.Channel.GetJobTiTleByTiTleNameAsync(BranchID, Title);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIDFromUserEmailAsync(string UserEmail, int BranchID)
        {
            return base.Channel.GetUserIDFromUserEmailAsync(UserEmail, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetGroupIDThatMatchesSpecificGroupAsync(string GroupName, int BranchID)
        {
            return base.Channel.GetGroupIDThatMatchesSpecificGroupAsync(GroupName, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetSiteBySiteNameAsync(int BranchID, string SiteName)
        {
            return base.Channel.GetSiteBySiteNameAsync(BranchID, SiteName);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetGroupInfoAsync(int BranchID, int GroupID)
        {
            return base.Channel.GetGroupInfoAsync(BranchID, GroupID);
        }
        
        public System.Threading.Tasks.Task EmployeeInfo_UpdateADInfoAsync(int UserID, int BranchID, string FirstName, string SecondName, string ThirdName, string LastName, int GroupID, int DepartmentID, string Tel, string Email, string Mobile, int JobTitleID, int ManagerID, int SiteID)
        {
            return base.Channel.EmployeeInfo_UpdateADInfoAsync(UserID, BranchID, FirstName, SecondName, ThirdName, LastName, GroupID, DepartmentID, Tel, Email, Mobile, JobTitleID, ManagerID, SiteID);
        }
        
        public System.Threading.Tasks.Task EmployeeInfo_UpdateStatusAsync(int UserID, int BranchID, int StatusID)
        {
            return base.Channel.EmployeeInfo_UpdateStatusAsync(UserID, BranchID, StatusID);
        }
        
        public System.Threading.Tasks.Task ADMappingInsertAsync(int UserID, int BranchID, string UserSID, int DomainID)
        {
            return base.Channel.ADMappingInsertAsync(UserID, BranchID, UserSID, DomainID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ADIntegrationSelectAsync(int BranchID, int DomainID)
        {
            return base.Channel.ADIntegrationSelectAsync(BranchID, DomainID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ADIntegrationSelectAllAsync(int BranchID)
        {
            return base.Channel.ADIntegrationSelectAllAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PAScheduleTime_SelectAllAsync(int BranchID)
        {
            return base.Channel.PAScheduleTime_SelectAllAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task IssueFollowUp_InsertAsync(int UserID, int BranchID, int IssueID, System.DateTime FollowUpDate, string FollowUpNote)
        {
            return base.Channel.IssueFollowUp_InsertAsync(UserID, BranchID, IssueID, FollowUpDate, FollowUpNote);
        }
        
        public System.Threading.Tasks.Task PAScheduleIssuedSaveAsync(System.DateTime SubmitDate, int BranchID, int IssueID, int ScheduleIssueID)
        {
            return base.Channel.PAScheduleIssuedSaveAsync(SubmitDate, BranchID, IssueID, ScheduleIssueID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PAScheduleIssued_SelectBasedOnMonthAsync(int ScheduleIssueID, int BranchID, System.DateTime SubmitDate)
        {
            return base.Channel.PAScheduleIssued_SelectBasedOnMonthAsync(ScheduleIssueID, BranchID, SubmitDate);
        }
        
        public System.Threading.Tasks.Task IssueHistorySaveAsync(int IssueID, int BranchID, int ActionID, System.DateTime ActionDate, string ActionTextEn, string ActionTextAr, int ActionByUserID)
        {
            return base.Channel.IssueHistorySaveAsync(IssueID, BranchID, ActionID, ActionDate, ActionTextEn, ActionTextAr, ActionByUserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllPASchadualeInfoBySchadualIDAsync(int BranchID, int ScheduleID)
        {
            return base.Channel.GetAllPASchadualeInfoBySchadualIDAsync(BranchID, ScheduleID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoSelectAsync(int IssueID, int BranchID)
        {
            return base.Channel.IssueInfoSelectAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetPASubmittedIssueAsync(int ScheduleIssueID, int BranchID, System.DateTime SubmitDate)
        {
            return base.Channel.GetPASubmittedIssueAsync(ScheduleIssueID, BranchID, SubmitDate);
        }
        
        public System.Threading.Tasks.Task ADMapping_DeleteAsync(int UserID, int BranchID, int DomainID)
        {
            return base.Channel.ADMapping_DeleteAsync(UserID, BranchID, DomainID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ShareLocation_GetOpenAndUnassignedRequestsAsync(int ProjectID, int BranchID)
        {
            return base.Channel.Zain_ShareLocation_GetOpenAndUnassignedRequestsAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ShareLocation_Integration_selectAllAsync(int BranchID)
        {
            return base.Channel.Zain_ShareLocation_Integration_selectAllAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<string> Zain_ShareLocation_SaveDetailsAsync(string Refcode, string Latitude, string Longitude, string ServedCell, string BuildingNumber, string FloorNumber)
        {
            return base.Channel.Zain_ShareLocation_SaveDetailsAsync(Refcode, Latitude, Longitude, ServedCell, BuildingNumber, FloorNumber);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_AutoResolve_Integration_GetOpenRequestsAsync(int BranchID)
        {
            return base.Channel.Zain_AutoResolve_Integration_GetOpenRequestsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CloseCategory_SelectAsync(long BranchID, long CloseCategoryID)
        {
            return base.Channel.CloseCategory_SelectAsync(BranchID, CloseCategoryID);
        }
        
        public System.Threading.Tasks.Task IssueStatistics_updateCloseReasonAsync(long IssueID, int BranchID, int CloserID)
        {
            return base.Channel.IssueStatistics_updateCloseReasonAsync(IssueID, BranchID, CloserID);
        }
        
        public System.Threading.Tasks.Task IssueStatistics_updateCloseCategoryAsync(long IssueID, int BranchID, int CloseCategoryID)
        {
            return base.Channel.IssueStatistics_updateCloseCategoryAsync(IssueID, BranchID, CloseCategoryID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_Survey_GetOpenAndUnassignedRequestsAsync(int ProjectID, int BranchID)
        {
            return base.Channel.Zain_Survey_GetOpenAndUnassignedRequestsAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_Survey_Integration_selectAllAsync(int BranchID)
        {
            return base.Channel.Zain_Survey_Integration_selectAllAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<string> Zain_Survey_SaveDetailsAsync(string Refcode, bool IsClosed)
        {
            return base.Channel.Zain_Survey_SaveDetailsAsync(Refcode, IsClosed);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3Settings_selectAllAsync()
        {
            return base.Channel.Pop3Settings_selectAllAsync();
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3Settings_selectAsync(int ID)
        {
            return base.Channel.Pop3Settings_selectAsync(ID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3MailHistory_selectAsync(string MailID, int ID)
        {
            return base.Channel.Pop3MailHistory_selectAsync(MailID, ID);
        }
        
        public System.Threading.Tasks.Task<int> Pop3MailHistory_insertAsync(string MailID, int ID)
        {
            return base.Channel.Pop3MailHistory_insertAsync(MailID, ID);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIDFromEmailAsync(string Email, int BranchID)
        {
            return base.Channel.GetUserIDFromEmailAsync(Email, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetDivisionDataMapingAsync(string Company_Code, string Branch_Code, int BranchID, string Department_Code, string Section_code, string System_code, int TypeID)
        {
            return base.Channel.GetDivisionDataMapingAsync(Company_Code, Branch_Code, BranchID, Department_Code, Section_code, System_code, TypeID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetUnitDataMapingDetailsAsync(string Company_Code, string Branch_Code, int BranchID, string Department_Code, string Section_code, int TypeID, string Division_code, string System_code)
        {
            return base.Channel.GetUnitDataMapingDetailsAsync(Company_Code, Branch_Code, BranchID, Department_Code, Section_code, TypeID, Division_code, System_code);
        }
        
        public System.Threading.Tasks.Task<T.GetCustomerUserIDFromEmailResponse> GetCustomerUserIDFromEmailAsync(T.GetCustomerUserIDFromEmailRequest request)
        {
            return base.Channel.GetCustomerUserIDFromEmailAsync(request);
        }
        
        public System.Threading.Tasks.Task<int> GetProjectIDByAccountIDAsync(int AccountID, int BranchID)
        {
            return base.Channel.GetProjectIDByAccountIDAsync(AccountID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetAccountIDFromEmailAsync(string Email, int BranchID)
        {
            return base.Channel.GetAccountIDFromEmailAsync(Email, BranchID);
        }
        
        public System.Threading.Tasks.Task SendAutomaticReplyClosedMessageAsync(long IssueID, int BranchID, int ProjectID, string SenderEmail, string Refcode, int Lang)
        {
            return base.Channel.SendAutomaticReplyClosedMessageAsync(IssueID, BranchID, ProjectID, SenderEmail, Refcode, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3KeywordSettings_SelectAllAsync(int BranchID, int Lang)
        {
            return base.Channel.Pop3KeywordSettings_SelectAllAsync(BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3KeywordSettings_SelectAsync(int KeywordID, int BranchID)
        {
            return base.Channel.Pop3KeywordSettings_SelectAsync(KeywordID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Pop3TrustedDomains_selectAsync(int BranchID)
        {
            return base.Channel.Pop3TrustedDomains_selectAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> JEPCO_LoginAsync(string UserName, string Password, string CompanyCode, string BranchCode, string Lang)
        {
            return base.Channel.JEPCO_LoginAsync(UserName, Password, CompanyCode, BranchCode, Lang);
        }
        
        public System.Threading.Tasks.Task JEPCO_LogoutAsync(int UserID, int BranchID)
        {
            return base.Channel.JEPCO_LogoutAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> JEPCO_ViewRequests_ParentsAsync(int UserID, int BranchID, int Lang)
        {
            return base.Channel.JEPCO_ViewRequests_ParentsAsync(UserID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> JEPCO_ViewRequests_ChildsAsync(long IssueID, int BranchID, int Lang)
        {
            return base.Channel.JEPCO_ViewRequests_ChildsAsync(IssueID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> JEPCO_IssueSaveAsync(int BranchID, string RequesterMobile, string RequesterName, string RequesterTel, int ProjectID, int ServiceID, int CategoryID, int SubCategoryID, int SubItemID, string IssueTitle, string IssueDescription, int FailureTypeID, string AttachName, string AttachValue, string AdditionalFields)
        {
            return base.Channel.JEPCO_IssueSaveAsync(BranchID, RequesterMobile, RequesterName, RequesterTel, ProjectID, ServiceID, CategoryID, SubCategoryID, SubItemID, IssueTitle, IssueDescription, FailureTypeID, AttachName, AttachValue, AdditionalFields);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetNationalitiesAsync(int Lang)
        {
            return base.Channel.MOPSD_GetNationalitiesAsync(Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetCountriesAsync(int Lang)
        {
            return base.Channel.MOPSD_GetCountriesAsync(Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetCountryCitiesAsync(int CountryID, int Lang)
        {
            return base.Channel.MOPSD_GetCountryCitiesAsync(CountryID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> MOPSD_UpdateUserAsync(string UserName, int NationalityID, string FullName, string Email, int CountryID, int CityID, string Address, int Lang)
        {
            return base.Channel.MOPSD_UpdateUserAsync(UserName, NationalityID, FullName, Email, CountryID, CityID, Address, Lang);
        }
        
        public System.Threading.Tasks.Task<string> MOPSD_RegisterUserAsync(string UserName, int Lang)
        {
            return base.Channel.MOPSD_RegisterUserAsync(UserName, Lang);
        }
        
        public System.Threading.Tasks.Task<string> MOPSD_ConfirmUserAsync(string UserName, int Lang, string ConfirmationCode)
        {
            return base.Channel.MOPSD_ConfirmUserAsync(UserName, Lang, ConfirmationCode);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetRecordTypesAsync(int Lang)
        {
            return base.Channel.MOPSD_GetRecordTypesAsync(Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetProjectsAsync(string SearchText, int Lang)
        {
            return base.Channel.MOPSD_GetProjectsAsync(SearchText, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_GetProjectServicesAsync(int ProjectID, int Lang)
        {
            return base.Channel.MOPSD_GetProjectServicesAsync(ProjectID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> MOPSD_NewRequestAsync(string UserName, int RecordTypeID, int ProjectID, int ServiceID, string Title, string Description, string AttachName, string AttachValue, string Latitude, string Longitude, string Address, int Lang)
        {
            return base.Channel.MOPSD_NewRequestAsync(UserName, RecordTypeID, ProjectID, ServiceID, Title, Description, AttachName, AttachValue, Latitude, Longitude, Address, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_ViewRequestsAsync(string UserName, int Lang)
        {
            return base.Channel.MOPSD_ViewRequestsAsync(UserName, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MOPSD_RequestInquiryAsync(string UserName, string Refcode, int Lang, int RecordTypeID)
        {
            return base.Channel.MOPSD_RequestInquiryAsync(UserName, Refcode, Lang, RecordTypeID);
        }
        
        public System.Threading.Tasks.Task<string> MOPSD_RequestRateAsync(string UserName, long IssueID, int Rate, int Lang)
        {
            return base.Channel.MOPSD_RequestRateAsync(UserName, IssueID, Rate, Lang);
        }
        
        public System.Threading.Tasks.Task RequestReopenAsync(int UserID, long IssueID, int BranchID, int Lang, string Reason)
        {
            return base.Channel.RequestReopenAsync(UserID, IssueID, BranchID, Lang, Reason);
        }
        
        public System.Threading.Tasks.Task<string> Zain_NewRequestAsync(
                    string ClientMSISDN, 
                    string ClientName, 
                    string UserName, 
                    int RequestTypeID, 
                    int ProjectID, 
                    int ServiceID, 
                    int CategoryID, 
                    int SubCategoryID, 
                    int SubItemID, 
                    string Title, 
                    string Description, 
                    int ImpactID, 
                    int UrgencyID, 
                    int PriorityID, 
                    string Attachments, 
                    string AdditionalFields, 
                    int Lang, 
                    bool EnableShareLocation, 
                    string ShareLocationOtherMobile)
        {
            return base.Channel.Zain_NewRequestAsync(ClientMSISDN, ClientName, UserName, RequestTypeID, ProjectID, ServiceID, CategoryID, SubCategoryID, SubItemID, Title, Description, ImpactID, UrgencyID, PriorityID, Attachments, AdditionalFields, Lang, EnableShareLocation, ShareLocationOtherMobile);
        }
        
        public System.Threading.Tasks.Task<string> Zain_NewRequestAttachmentAsync(string UserName, long IssueID, string AttachName, string AttachValue, int Lang)
        {
            return base.Channel.Zain_NewRequestAttachmentAsync(UserName, IssueID, AttachName, AttachValue, Lang);
        }
        
        public System.Threading.Tasks.Task SendAttachmentEmailAsync(long IssueID, int BranchID, string AttachPath)
        {
            return base.Channel.SendAttachmentEmailAsync(IssueID, BranchID, AttachPath);
        }
        
        public System.Threading.Tasks.Task<string> Zain_UpdateRequestDescriptionAsync(string UserName, long IssueID, string Description, int Lang)
        {
            return base.Channel.Zain_UpdateRequestDescriptionAsync(UserName, IssueID, Description, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ViewRequestsAsync(string UserName, string Refcode, string ClientMSISDN, string Description, int StatusID, System.DateTime FromCreateDate, System.DateTime ToCreateDate, string AdditionalFieldsOnView, string AdditionalFieldsFilters, int Lang)
        {
            return base.Channel.Zain_ViewRequestsAsync(UserName, Refcode, ClientMSISDN, Description, StatusID, FromCreateDate, ToCreateDate, AdditionalFieldsOnView, AdditionalFieldsFilters, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_ViewRequests_AllFieldsAsync(string UserName, string Refcode, string ClientMSISDN, string Description, int StatusID, System.DateTime FromCreateDate, System.DateTime ToCreateDate, string AdditionalFieldsOnView, string AdditionalFieldsFilters, int Lang)
        {
            return base.Channel.Zain_ViewRequests_AllFieldsAsync(UserName, Refcode, ClientMSISDN, Description, StatusID, FromCreateDate, ToCreateDate, AdditionalFieldsOnView, AdditionalFieldsFilters, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_RequestAttachmentsAsync(long IssueID, int Lang)
        {
            return base.Channel.Zain_RequestAttachmentsAsync(IssueID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> Zain_RequestNotesAsync(long IssueID, int Lang)
        {
            return base.Channel.Zain_RequestNotesAsync(IssueID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> Zain_NewRequestNoteAsync(string UserName, long IssueID, string NoteTitle, string NoteDetails, int Lang)
        {
            return base.Channel.Zain_NewRequestNoteAsync(UserName, IssueID, NoteTitle, NoteDetails, Lang);
        }
        
        public System.Threading.Tasks.Task<string> Zain_RequestReassignToPreviousAssigneeAsync(string UserName, long IssueID, string ReassignReason, int Lang)
        {
            return base.Channel.Zain_RequestReassignToPreviousAssigneeAsync(UserName, IssueID, ReassignReason, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersReports_selectSendReportsAsync(int BranchID)
        {
            return base.Channel.UsersReports_selectSendReportsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task UsersReports_UpdateLastNotificationDateAsync(int ReportID, int UserID, int BranchID, System.DateTime LastNotificationDate)
        {
            return base.Channel.UsersReports_UpdateLastNotificationDateAsync(ReportID, UserID, BranchID, LastNotificationDate);
        }
        
        public System.Threading.Tasks.Task<object> GetMaintenanceContractEmailBodyAsync(int ContactID, int UserID, int BranchID, int ReportSourceID, int Lang)
        {
            return base.Channel.GetMaintenanceContractEmailBodyAsync(ContactID, UserID, BranchID, ReportSourceID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetReportTabularEmailBodyAsync(int ReportID, int UserID, int BranchID, int ReportSourceID, string OrderByID, int Lang)
        {
            return base.Channel.GetReportTabularEmailBodyAsync(ReportID, UserID, BranchID, ReportSourceID, OrderByID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetReportGraphicalEmailBodyAsync(int ReportID, int UserID, int BranchID, int ReportSourceID, int Lang)
        {
            return base.Channel.GetReportGraphicalEmailBodyAsync(ReportID, UserID, BranchID, ReportSourceID, Lang);
        }
        
        public System.Threading.Tasks.Task MenaPortal_MyRequestsAsync(string Employee_Code, string Company_Code, string Branch_Code, int Lang, int ProjectID, int StatusID, string FromDate, string ToDate)
        {
            return base.Channel.MenaPortal_MyRequestsAsync(Employee_Code, Company_Code, Branch_Code, Lang, ProjectID, StatusID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task CheckLoginDetailsAsync(string UserName, string Password, string CompanyCode, string BranchCode, string Lang)
        {
            return base.Channel.CheckLoginDetailsAsync(UserName, Password, CompanyCode, BranchCode, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueHistory_CheckRequestWithNoActionAsync(int BranchID)
        {
            return base.Channel.IssueHistory_CheckRequestWithNoActionAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetSystemParametersAsync(object BranchID)
        {
            return base.Channel.GetSystemParametersAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<string> BuildReminderMessageAsync(string[] dic, string From, string Refcode, string Title, string Reciepient, string project, string Description, int BranchID)
        {
            return base.Channel.BuildReminderMessageAsync(dic, From, Refcode, Title, Reciepient, project, Description, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersReportsFieldsCCs_selectAsync(int ReportID, int BranchID, int ReportUserID)
        {
            return base.Channel.UsersReportsFieldsCCs_selectAsync(ReportID, BranchID, ReportUserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersReports_selectAsync(int ReportID, int UserID, int BranchID)
        {
            return base.Channel.UsersReports_selectAsync(ReportID, UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAdditionalFieldValuesAsync(int IssueID, int BranchID)
        {
            return base.Channel.GetAdditionalFieldValuesAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task UpdateContractItemStatusAsync(int ContractID, int ItemID, int BranchID)
        {
            return base.Channel.UpdateContractItemStatusAsync(ContractID, ItemID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> Zain_ChangeStatusAsync(string UserName, long IssueID, int branchID, int IssueStatusID, string ActionTaken, bool IsAssignToGroup, int AssignTo, int Lang)
        {
            return base.Channel.Zain_ChangeStatusAsync(UserName, IssueID, branchID, IssueStatusID, ActionTaken, IsAssignToGroup, AssignTo, Lang);
        }
        
        public System.Threading.Tasks.Task IssueFlowHistory_SaveAsync(int FlowID, long IssueID, int BranchID, int ActionByUserID, int ActionID, bool isCompleted)
        {
            return base.Channel.IssueFlowHistory_SaveAsync(FlowID, IssueID, BranchID, ActionByUserID, ActionID, isCompleted);
        }
        
        public System.Threading.Tasks.Task<int> IssueFlowHistory_GetCurrentAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueFlowHistory_GetCurrentAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task UsersRulesTimeEscalationHistory_insertAsync(int RuleID, int UserID, int BranchID, long IssueID)
        {
            return base.Channel.UsersRulesTimeEscalationHistory_insertAsync(RuleID, UserID, BranchID, IssueID);
        }
        
        public System.Threading.Tasks.Task<int> TimeDiffAsync(string Time1, string Time2, string BreakStartTimeStr, string BreakEndTimeStr)
        {
            return base.Channel.TimeDiffAsync(Time1, Time2, BreakStartTimeStr, BreakEndTimeStr);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetSLADateAsync(System.DateTime StartDate, int TotalValue, T.ArrayOfXElement ds, int TotalWorkingHour)
        {
            return base.Channel.GetSLADateAsync(StartDate, TotalValue, ds, TotalWorkingHour);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueAssignedToEmailAsync(long IssueID, int BranchID)
        {
            return base.Channel.GetIssueAssignedToEmailAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetIssueRequestorEmailAsync(long IssueID, int branchID)
        {
            return base.Channel.GetIssueRequestorEmailAsync(IssueID, branchID);
        }
        
        public System.Threading.Tasks.Task<string> GetIssueCreaterEmailAsync(long IssueID, int branchID)
        {
            return base.Channel.GetIssueCreaterEmailAsync(IssueID, branchID);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectOwnerEmailAsync(int ProjectID, int BranchID)
        {
            return base.Channel.GetProjectOwnerEmailAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetIssueRequestorMobileAsync(long IssueID, int branchID)
        {
            return base.Channel.GetIssueRequestorMobileAsync(IssueID, branchID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserMobileAsync(int UserID, int branchID)
        {
            return base.Channel.GetUserMobileAsync(UserID, branchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueAssignedToMobileAsync(long IssueID, int branchID)
        {
            return base.Channel.GetIssueAssignedToMobileAsync(IssueID, branchID);
        }
        
        public System.Threading.Tasks.Task<int> GetIssueProjectAsync(int IssueID, int BranchId)
        {
            return base.Channel.GetIssueProjectAsync(IssueID, BranchId);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllOpenRequestsHaveSLAAsync(int BranchID)
        {
            return base.Channel.GetAllOpenRequestsHaveSLAAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SLAEscalations_selectAsync(int SLAID, int BranchID)
        {
            return base.Channel.SLAEscalations_selectAsync(SLAID, BranchID);
        }
        
        public System.Threading.Tasks.Task IssueSLAInfo_CheckBreachAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueSLAInfo_CheckBreachAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoSLAEscalationsHistory_selectAsync(long IssueID, int BranchID, int SLAID, int EscalationID, int EscalationTypeID)
        {
            return base.Channel.IssueInfoSLAEscalationsHistory_selectAsync(IssueID, BranchID, SLAID, EscalationID, EscalationTypeID);
        }
        
        public System.Threading.Tasks.Task IssueInfoSLAEscalationsHistory_insertAsync(long IssueID, int BranchID, int SLAID, int EscalationID, int EscalationTypeID)
        {
            return base.Channel.IssueInfoSLAEscalationsHistory_insertAsync(IssueID, BranchID, SLAID, EscalationID, EscalationTypeID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGeneralInfo_selectAsync(int SLAID, int BranchID)
        {
            return base.Channel.SLAGeneralInfo_selectAsync(SLAID, BranchID);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIssueResponseFlagAsync(double IssueID, int BranchID)
        {
            return base.Channel.CheckIssueResponseFlagAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIssueStatusIsOpenAsync(long IssueID, int BranchID)
        {
            return base.Channel.CheckIssueStatusIsOpenAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailTemplateIsActiveAsync(int TemplateID, int BranchID)
        {
            return base.Channel.CheckEmailTemplateIsActiveAsync(TemplateID, BranchID);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailTemplateIsCustomizeAsync(int TemplateID, int BranchID)
        {
            return base.Channel.CheckEmailTemplateIsCustomizeAsync(TemplateID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailTemplateSubjectByIssueIDAsync(int TemplateID, long IssueID, int BranchID, int Lang, int ID1, int ID2)
        {
            return base.Channel.GetEmailTemplateSubjectByIssueIDAsync(TemplateID, IssueID, BranchID, Lang, ID1, ID2);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailTemplateBodyByIssueIDAsync(int TemplateID, long IssueID, int BranchID, int Lang, int ID1, int ID2)
        {
            return base.Channel.GetEmailTemplateBodyByIssueIDAsync(TemplateID, IssueID, BranchID, Lang, ID1, ID2);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailTemplateSubjectByContractIDAsync(int TemplateID, int ContractID, int BranchID, int Lang)
        {
            return base.Channel.GetEmailTemplateSubjectByContractIDAsync(TemplateID, ContractID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailTemplateBodyByContractIDAsync(int TemplateID, int ContractID, int BranchID, int Lang)
        {
            return base.Channel.GetEmailTemplateBodyByContractIDAsync(TemplateID, ContractID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> BuildFinalCloseMessageAsync(int IssueID, int BranchID, int Lang)
        {
            return base.Channel.BuildFinalCloseMessageAsync(IssueID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersRuleAsync(int BranchID)
        {
            return base.Channel.GetUsersRuleAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> BranchEmailSettings_selectAsync(int BranchID)
        {
            return base.Channel.BranchEmailSettings_selectAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRulesProjects_selectProjectAsync(int RuleID, int UserID, int BranchID)
        {
            return base.Channel.UsersRulesProjects_selectProjectAsync(RuleID, UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task CheckRulesAsync(string[] dic, T.ArrayOfXElement dsProjects, int RuleID, int BranchID, int UserID, int CompareTypeID, int CompareValue, int TemplateID, bool AssignToGroup, string RuleMessage, string RuleDescription)
        {
            return base.Channel.CheckRulesAsync(dic, dsProjects, RuleID, BranchID, UserID, CompareTypeID, CompareValue, TemplateID, AssignToGroup, RuleMessage, RuleDescription);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueFollowUp_selectAllAsync(int BranchID)
        {
            return base.Channel.IssueFollowUp_selectAllAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ScheduleDetails_SelectAsync(int ScheduleID, int BranchID)
        {
            return base.Channel.ScheduleDetails_SelectAsync(ScheduleID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAEscalationToEmailsAsync(int SLAID, int BranchID, int EscalationID)
        {
            return base.Channel.GetSLAEscalationToEmailsAsync(SLAID, BranchID, EscalationID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAEscalationToMobilesAsync(int SLAID, int BranchID, int EscalationID)
        {
            return base.Channel.GetSLAEscalationToMobilesAsync(SLAID, BranchID, EscalationID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ContractsGeneralInformation_selectAsync(int ContractID, int BranchID)
        {
            return base.Channel.ContractsGeneralInformation_selectAsync(ContractID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractNotifyEmployeesEmailsAsync(int ContractID, int BranchID)
        {
            return base.Channel.GetContractNotifyEmployeesEmailsAsync(ContractID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractNotifyAccountsEmailsAsync(int ContractID, int BranchID)
        {
            return base.Channel.GetContractNotifyAccountsEmailsAsync(ContractID, BranchID);
        }
        
        public System.Threading.Tasks.Task ContractItems_UpdateLastNotificationDateAsync(int ItemID, int ContractID, int BranchID)
        {
            return base.Channel.ContractItems_UpdateLastNotificationDateAsync(ItemID, ContractID, BranchID);
        }
        
        public System.Threading.Tasks.Task ContractItems_UpdateStatusAsync(int StatusID, int BranchID)
        {
            return base.Channel.ContractItems_UpdateStatusAsync(StatusID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ContractItems_selectAsync(int ItemID, int ContractID, int BranchID)
        {
            return base.Channel.ContractItems_selectAsync(ItemID, ContractID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractItemsExcedTodayAsync(int BranchID)
        {
            return base.Channel.GetContractItemsExcedTodayAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetContractsBeforeDaysValueAsync(int BranchID)
        {
            return base.Channel.GetContractsBeforeDaysValueAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PMGeneralInfo_SelectAllAsync(int BranchID)
        {
            return base.Channel.PMGeneralInfo_SelectAllAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetSystemParameterAsync(int BranchID)
        {
            return base.Channel.GetSystemParameterAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task IssueInfo_UpdateSourceAsync(long IssueID, int BranchID, int IncidentSourceID)
        {
            return base.Channel.IssueInfo_UpdateSourceAsync(IssueID, BranchID, IncidentSourceID);
        }
        
        public System.Threading.Tasks.Task IssueInfo_UpdateDescriptionAsync(long IssueID, int BranchID, string Description)
        {
            return base.Channel.IssueInfo_UpdateDescriptionAsync(IssueID, BranchID, Description);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetCRWorkflowTaskEscalationsAsync(int BranchID)
        {
            return base.Channel.GetCRWorkflowTaskEscalationsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersGroupEmailsAsync(int GroupID, int BranchID)
        {
            return base.Channel.GetUsersGroupEmailsAsync(GroupID, BranchID);
        }
        
        public System.Threading.Tasks.Task WorkflowTaskEscalationsHistory_insertAsync(int NotificationID, int TaskID, int PhaseID, int WorkflowID, int BranchID, int CRID)
        {
            return base.Channel.WorkflowTaskEscalationsHistory_insertAsync(NotificationID, TaskID, PhaseID, WorkflowID, BranchID, CRID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> WorkflowTaskEscalationsHistory_selectAsync(int NotificationID, int TaskID, int PhaseID, int WorkflowID, int BranchID, int CRID)
        {
            return base.Channel.WorkflowTaskEscalationsHistory_selectAsync(NotificationID, TaskID, PhaseID, WorkflowID, BranchID, CRID);
        }
        
        public System.Threading.Tasks.Task<string> CRWorkflowTaskNotificationBodyAsync(int WorkFlowID, int CRID, int lang, int BranchID)
        {
            return base.Channel.CRWorkflowTaskNotificationBodyAsync(WorkFlowID, CRID, lang, BranchID);
        }
        
        public System.Threading.Tasks.Task SendIssueSimpleModeNotifyAsync(string[] dic, string Project, string Title, string Description, string Priority, string ExpDate, string dir, int BranchID, int ProjectID, string RequestedBy)
        {
            return base.Channel.SendIssueSimpleModeNotifyAsync(dic, Project, Title, Description, Priority, ExpDate, dir, BranchID, ProjectID, RequestedBy);
        }
        
        public System.Threading.Tasks.Task SendEmailSimpleModeAsync(int IssueID, int ProjectID, int UserID, int BranchID, int Language, string Title, string Desc, string[] dic)
        {
            return base.Channel.SendEmailSimpleModeAsync(IssueID, ProjectID, UserID, BranchID, Language, Title, Desc, dic);
        }
        
        public System.Threading.Tasks.Task SendIssueFullModeNotifyAsync(long IssueID, int BranchID, int ProjectID, int Lang, T.MailPriority Priority, string[] dic, string RootPath, bool IsNewRequest)
        {
            return base.Channel.SendIssueFullModeNotifyAsync(IssueID, BranchID, ProjectID, Lang, Priority, dic, RootPath, IsNewRequest);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllIssueShouldbeClosedPerProjectAsync(int ProjectID, int BranchID)
        {
            return base.Channel.GetAllIssueShouldbeClosedPerProjectAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllIssueShouldbeClosedPerProject_RejectedCancelledAsync(int ProjectID, int BranchID)
        {
            return base.Channel.GetAllIssueShouldbeClosedPerProject_RejectedCancelledAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllProjectHaveAutoCloseSettingsAsync(int BranchID)
        {
            return base.Channel.GetAllProjectHaveAutoCloseSettingsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllProjectHaveAutoCloseSettings_RejectedCancelledAsync(int BranchID)
        {
            return base.Channel.GetAllProjectHaveAutoCloseSettings_RejectedCancelledAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectIssueService_selectALLAsync(long projectID, int BranchID, int LanguageID)
        {
            return base.Channel.ProjectIssueService_selectALLAsync(projectID, BranchID, LanguageID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectServicesListAsync(int UserID, long ProjectID, int BranchID, int Lang)
        {
            return base.Channel.GetProjectServicesListAsync(UserID, ProjectID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetServiceTypesListAsync(int BranchID, int Lang)
        {
            return base.Channel.GetServiceTypesListAsync(BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectServicesListByServiceTypeAsync(int UserID, long ProjectID, int BranchID, int Lang, int ServiceTypeID)
        {
            return base.Channel.GetProjectServicesListByServiceTypeAsync(UserID, ProjectID, BranchID, Lang, ServiceTypeID);
        }
        
        public System.Threading.Tasks.Task<bool> SLACheckForDateWithBusinessTimeAsync(System.DateTime Date1, int ScheduleID, int BranchID)
        {
            return base.Channel.SLACheckForDateWithBusinessTimeAsync(Date1, ScheduleID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> BuildPMUserTaskNotifyBodyAsync(string Employee, string AssetDesc, string Time, int BranchID, int Lang, string Note)
        {
            return base.Channel.BuildPMUserTaskNotifyBodyAsync(Employee, AssetDesc, Time, BranchID, Lang, Note);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllSurveyHaveAutoSendingAsync(int BranchID)
        {
            return base.Channel.GetAllSurveyHaveAutoSendingAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task SendSurveyAsync(int SurveyID, int BranchID, int UserID, int Lang, string dir, long IssueID)
        {
            return base.Channel.SendSurveyAsync(SurveyID, BranchID, UserID, Lang, dir, IssueID);
        }
        
        public System.Threading.Tasks.Task<int> GetIssueRequestorIDAsync(long IssueID, int branchID)
        {
            return base.Channel.GetIssueRequestorIDAsync(IssueID, branchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SurveyGeneralInformation_selectByProjectIDAsync(int ProjectID, int BranchID)
        {
            return base.Channel.SurveyGeneralInformation_selectByProjectIDAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task UsersSurveyCounter_saveAsync(int UserID, int SurveyID, int BranchID)
        {
            return base.Channel.UsersSurveyCounter_saveAsync(UserID, SurveyID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersSurveyCounter_selectAsync(int UserID, int SurveyID, int BranchID)
        {
            return base.Channel.UsersSurveyCounter_selectAsync(UserID, SurveyID, BranchID);
        }
        
        public System.Threading.Tasks.Task UsersSurveyCounter_ResetCounterAsync(int UserID, int BranchID, int SurveyID)
        {
            return base.Channel.UsersSurveyCounter_ResetCounterAsync(UserID, BranchID, SurveyID);
        }
        
        public System.Threading.Tasks.Task SurveyGeneralInformation_updateLastNotificationDateAsync(int SurveyID, int BranchID, System.DateTime LastNotificationDate)
        {
            return base.Channel.SurveyGeneralInformation_updateLastNotificationDateAsync(SurveyID, BranchID, LastNotificationDate);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SurveyNotifyUsers_selectAsync(int SurveyID, int BranchID, int Lang)
        {
            return base.Channel.SurveyNotifyUsers_selectAsync(SurveyID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SurveyNotifyGroups_selectAsync(int SurveyID, int BranchID, int Lang)
        {
            return base.Channel.SurveyNotifyGroups_selectAsync(SurveyID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetGroupUsersAsync(int GroupID, int BranchID)
        {
            return base.Channel.GetGroupUsersAsync(GroupID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetCompanyInfoAsync(int Language)
        {
            return base.Channel.GetCompanyInfoAsync(Language);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetBranchListAsync(int CompanyID, int Lang)
        {
            return base.Channel.GetBranchListAsync(CompanyID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllBranchIDsAsync()
        {
            return base.Channel.GetAllBranchIDsAsync();
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> BranchIntegrationSelectAsync(int BranchID)
        {
            return base.Channel.BranchIntegrationSelectAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MenaItechShortMazeMapping_selectCodeAsync(string Company_Code, string Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int ShortMaze_BranchID, int TypeID)
        {
            return base.Channel.MenaItechShortMazeMapping_selectCodeAsync(Company_Code, Branch_Code, Mena_Major_Code, Mena_Minor_Code, ShortMaze_BranchID, TypeID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MenaItechShortMazeMapping_Division_selectCodeAsync(string Company_Code, string Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int TypeID, int BranchID, string Mena_DivisionCode)
        {
            return base.Channel.MenaItechShortMazeMapping_Division_selectCodeAsync(Company_Code, Branch_Code, Mena_Major_Code, Mena_Minor_Code, TypeID, BranchID, Mena_DivisionCode);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> MenaItechShortMazeMapping_Unit_selectCodeAsync(string Company_Code, string Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int TypeID, int BranchID, string Mena_DivisionCode, string Mena_UnitCode)
        {
            return base.Channel.MenaItechShortMazeMapping_Unit_selectCodeAsync(Company_Code, Branch_Code, Mena_Major_Code, Mena_Minor_Code, TypeID, BranchID, Mena_DivisionCode, Mena_UnitCode);
        }
        
        public System.Threading.Tasks.Task SavePayCodeTablesAsync(int TableID, int Code, string EnDesc, string ArDesc, string Prefix, int BranchID, int id, int ImageID, string ImageUrl, bool idBol, int id2, int id3)
        {
            return base.Channel.SavePayCodeTablesAsync(TableID, Code, EnDesc, ArDesc, Prefix, BranchID, id, ImageID, ImageUrl, idBol, id2, id3);
        }
        
        public System.Threading.Tasks.Task users_updatelogoAsync(int UserID, int BranchID, string Logo)
        {
            return base.Channel.users_updatelogoAsync(UserID, BranchID, Logo);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxCodeAsync(int TableID, int branchID, int ID, int ID2, int ID3)
        {
            return base.Channel.GetMaxCodeAsync(TableID, branchID, ID, ID2, ID3);
        }
        
        public System.Threading.Tasks.Task SaveMappingAsync(string Mena_Company_Code, string Mena_Branch_Code, string Mena_Major_Code, string Mena_Minor_Code, int ShortMaze_BranchID, int ShortMaze_MajorCode, int ShortMaze_MinorCode, int TypeID, string Mena_DivisionCode, string Mena_UnitCode, int ShortMaze_DivisionCode, int ShortMaze_UnitCode)
        {
            return base.Channel.SaveMappingAsync(Mena_Company_Code, Mena_Branch_Code, Mena_Major_Code, Mena_Minor_Code, ShortMaze_BranchID, ShortMaze_MajorCode, ShortMaze_MinorCode, TypeID, Mena_DivisionCode, Mena_UnitCode, ShortMaze_DivisionCode, ShortMaze_UnitCode);
        }
        
        public System.Threading.Tasks.Task<int> GetUserGroupIDFromUserIDAsync(int UserID, int BranchID)
        {
            return base.Channel.GetUserGroupIDFromUserIDAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserPasswordFromUserIDAsync(int UserID, int BranchID)
        {
            return base.Channel.GetUserPasswordFromUserIDAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetUserInfoAsync(int BranchID, int UserID, int lang)
        {
            return base.Channel.GetUserInfoAsync(BranchID, UserID, lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueAssigneeTeamLeadersAsync(long IssueID, int BranchID, int Lang)
        {
            return base.Channel.GetIssueAssigneeTeamLeadersAsync(IssueID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<int> SaveUserInfoAsync(
                    int UserID, 
                    int BranchID, 
                    int CompanyID, 
                    string Username, 
                    string password, 
                    int UserTypeID, 
                    int MustChangePassword, 
                    int CannotChangePassword, 
                    int PasswordNeverExpires, 
                    System.DateTime RegistrationDate, 
                    int StatusID, 
                    string Remark, 
                    string FstNameEn, 
                    string SndNameEn, 
                    string ThrdNameEn, 
                    string LastNameEn, 
                    string fstNameAr, 
                    string sndNameAr, 
                    string ThrdNameAr, 
                    string LstNameAr, 
                    int GroupID, 
                    int SiteID, 
                    int DepartmentID, 
                    int SectionID, 
                    int GenderID, 
                    int ReligionID, 
                    int CountryID, 
                    int CityID, 
                    int TimeZoneFactorID, 
                    string tel, 
                    string Email, 
                    string Mobile, 
                    int isadmin, 
                    int NationalityID, 
                    bool CanAccessAllProjects, 
                    bool MemberOfAllProjects, 
                    bool NotifyBySimpleMode, 
                    bool Resticted, 
                    bool isTeamLeader, 
                    int OperationID, 
                    bool isNotifiedForKE, 
                    bool KEAuther, 
                    bool KEPublisher, 
                    bool KBAuther, 
                    bool KBPublisher, 
                    long EmployeeNo, 
                    string Address, 
                    int SystemUserTypeID, 
                    int OfficeType, 
                    string FloorNo, 
                    string OfficeNo, 
                    bool MemberInIncTeam, 
                    bool MemberInPbmTeam, 
                    bool MemberInChngTeam, 
                    bool MemberInReleaseTeam, 
                    bool FullMode, 
                    bool VisualMode, 
                    bool SimpleMode, 
                    bool MainPageView, 
                    int DivisionID, 
                    int UnitID, 
                    bool CanSynchAD, 
                    bool CanAccessCM, 
                    int ManagerID, 
                    bool isDataEntryUser)
        {
            return base.Channel.SaveUserInfoAsync(UserID, BranchID, CompanyID, Username, password, UserTypeID, MustChangePassword, CannotChangePassword, PasswordNeverExpires, RegistrationDate, StatusID, Remark, FstNameEn, SndNameEn, ThrdNameEn, LastNameEn, fstNameAr, sndNameAr, ThrdNameAr, LstNameAr, GroupID, SiteID, DepartmentID, SectionID, GenderID, ReligionID, CountryID, CityID, TimeZoneFactorID, tel, Email, Mobile, isadmin, NationalityID, CanAccessAllProjects, MemberOfAllProjects, NotifyBySimpleMode, Resticted, isTeamLeader, OperationID, isNotifiedForKE, KEAuther, KEPublisher, KBAuther, KBPublisher, EmployeeNo, Address, SystemUserTypeID, OfficeType, FloorNo, OfficeNo, MemberInIncTeam, MemberInPbmTeam, MemberInChngTeam, MemberInReleaseTeam, FullMode, VisualMode, SimpleMode, MainPageView, DivisionID, UnitID, CanSynchAD, CanAccessCM, ManagerID, isDataEntryUser);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> BranchDefaultSettingsSelectAsync(int BranchID)
        {
            return base.Channel.BranchDefaultSettingsSelectAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIDFromUserNameAsync(string UserName, int BranchID)
        {
            return base.Channel.GetUserIDFromUserNameAsync(UserName, BranchID);
        }
        
        public System.Threading.Tasks.Task GroupInfo_UpdateGroupNameAsync(int GroupID, int BranchID, string GroupNameEn, string GroupNameAr)
        {
            return base.Channel.GroupInfo_UpdateGroupNameAsync(GroupID, BranchID, GroupNameEn, GroupNameAr);
        }
        
        public System.Threading.Tasks.Task<int> GetGroupIDByGroupNameAsync(int BranchID, string GroupNameEn, string GroupNameAr)
        {
            return base.Channel.GetGroupIDByGroupNameAsync(BranchID, GroupNameEn, GroupNameAr);
        }
        
        public System.Threading.Tasks.Task<string> GetGroupNameAsync(int GroupID, int BranchID, int lang)
        {
            return base.Channel.GetGroupNameAsync(GroupID, BranchID, lang);
        }
        
        public System.Threading.Tasks.Task<int> SaveGroupInfoAsync(
                    int GroupID, 
                    int BranchID, 
                    string GroupNameEn, 
                    string GroupNameAr, 
                    bool IsAdmin, 
                    int OperationID, 
                    bool UseSimpleEntryMode, 
                    bool InactivateMembers, 
                    bool AccessAllProjects, 
                    bool MemberInAllProjects, 
                    bool NotifiedBySimpleModeIssue, 
                    bool isRestricted, 
                    int SystemUserType, 
                    bool MemberInIncTeam, 
                    bool MemberInPbmTeam, 
                    bool MemberInChngTeam, 
                    bool MemberInReleaseTeam, 
                    bool FullMode, 
                    bool VisualMode, 
                    bool SimpleMode, 
                    bool MainPage, 
                    int OtherGroupID1, 
                    int OtherGroupID2, 
                    int OtherGroupID3)
        {
            return base.Channel.SaveGroupInfoAsync(GroupID, BranchID, GroupNameEn, GroupNameAr, IsAdmin, OperationID, UseSimpleEntryMode, InactivateMembers, AccessAllProjects, MemberInAllProjects, NotifiedBySimpleModeIssue, isRestricted, SystemUserType, MemberInIncTeam, MemberInPbmTeam, MemberInChngTeam, MemberInReleaseTeam, FullMode, VisualMode, SimpleMode, MainPage, OtherGroupID1, OtherGroupID2, OtherGroupID3);
        }
        
        public System.Threading.Tasks.Task<int> GetSystemUserTypeIDFromUserIDAsync(int UserID, int BranchID)
        {
            return base.Channel.GetSystemUserTypeIDFromUserIDAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersListAsync(int BranchID, int Lang)
        {
            return base.Channel.GetUsersListAsync(BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectSettingsSelectAsync(int ProjectID, int BranchID)
        {
            return base.Channel.ProjectSettingsSelectAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.CheckProjectAutoAssignAndReturnAssigneeResponse> CheckProjectAutoAssignAndReturnAssigneeAsync(T.CheckProjectAutoAssignAndReturnAssigneeRequest request)
        {
            return base.Channel.CheckProjectAutoAssignAndReturnAssigneeAsync(request);
        }
        
        public System.Threading.Tasks.Task<int> ProjectSettings_GetAssigneeBasedOnRRAsync(int ProjectID, int GroupID, int BranchID)
        {
            return base.Channel.ProjectSettings_GetAssigneeBasedOnRRAsync(ProjectID, GroupID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> RecordType_SelectAsync(int Lang, int TypeID)
        {
            return base.Channel.RecordType_SelectAsync(Lang, TypeID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueSubCategoryItemsAsync(int SubCategoryID, int MajorCategoryID, int BranchID, int Lang)
        {
            return base.Channel.GetIssueSubCategoryItemsAsync(SubCategoryID, MajorCategoryID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> BranchMandatoryFields_selectAsync(int BranchID)
        {
            return base.Channel.BranchMandatoryFields_selectAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectBranchAccounts_SelectAsync(int ProjectID, int BranchID, int Lang)
        {
            return base.Channel.ProjectBranchAccounts_SelectAsync(ProjectID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CheckUserPermissionAsync(int BranchID, int PortalID, int UserID)
        {
            return base.Channel.CheckUserPermissionAsync(BranchID, PortalID, UserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGroupInternalRules_selectAllAsync(int GroupID, int SLAID, int BranchID, int Lang)
        {
            return base.Channel.SLAGroupInternalRules_selectAllAsync(GroupID, SLAID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<int> GetDurationPerMinutesByIssueIDAsync(System.DateTime StartDate, System.DateTime EndDate, long IssueID, int BranchID, bool IsAssignToGroup, int AssignToID)
        {
            return base.Channel.GetDurationPerMinutesByIssueIDAsync(StartDate, EndDate, IssueID, BranchID, IsAssignToGroup, AssignToID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGroupInternalEscalations_selectAsync(int RuleID, int GroupID, int SLAID, int BranchID)
        {
            return base.Channel.SLAGroupInternalEscalations_selectAsync(RuleID, GroupID, SLAID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAGroupInternalEscalationsToEmailsAsync(int RuleID, int GroupID, int SLAID, int BranchID, int EscalationID)
        {
            return base.Channel.GetSLAGroupInternalEscalationsToEmailsAsync(RuleID, GroupID, SLAID, BranchID, EscalationID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetSLAGroupInternalEscalationsToMobilesAsync(int RuleID, int GroupID, int SLAID, int BranchID, int EscalationID)
        {
            return base.Channel.GetSLAGroupInternalEscalationsToMobilesAsync(RuleID, GroupID, SLAID, BranchID, EscalationID);
        }
        
        public System.Threading.Tasks.Task IssueInfoOLAEscalationsHistory_insertAsync(long IssueID, int BranchID, int RuleID, int GroupID, int SLAID, int EscalationID, int EscalationTypeID, int BreachedAmount)
        {
            return base.Channel.IssueInfoOLAEscalationsHistory_insertAsync(IssueID, BranchID, RuleID, GroupID, SLAID, EscalationID, EscalationTypeID, BreachedAmount);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoOLAEscalationsHistory_selectAsync(long IssueID, int BranchID, int RuleID, int GroupID, int SLAID, int EscalationID)
        {
            return base.Channel.IssueInfoOLAEscalationsHistory_selectAsync(IssueID, BranchID, RuleID, GroupID, SLAID, EscalationID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> SLAGroupsFilters_selectAsync(int GroupID, int SLAID, int BranchID)
        {
            return base.Channel.SLAGroupsFilters_selectAsync(GroupID, SLAID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueOLA_DetailsAsync(long IssueID, int BranchID, bool IsAssignToGroup, int AssignToID)
        {
            return base.Channel.IssueOLA_DetailsAsync(IssueID, BranchID, IsAssignToGroup, AssignToID);
        }
        
        public System.Threading.Tasks.Task ResetStuckedIssuesAsync(int BranchID)
        {
            return base.Channel.ResetStuckedIssuesAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task SendSMSToUser1Async(int BranchID, int UserID, string Mobile, long IssueID, int SMSID, string Message)
        {
            return base.Channel.SendSMSToUser1Async(BranchID, UserID, Mobile, IssueID, SMSID, Message);
        }
        
        public System.Threading.Tasks.Task SendSMSAsync(long IssueID, int StatusID, int BranchID, int Lang)
        {
            return base.Channel.SendSMSAsync(IssueID, StatusID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<int> SaveBranchAccountUserAsync(
                    int AccountID, 
                    int BranchID, 
                    int CompanyID, 
                    int UserID, 
                    string Username, 
                    string Password, 
                    int MustChangePassword, 
                    int CannotChangePassword, 
                    int PasswordNeverExpires, 
                    string remarks, 
                    System.DateTime Regdate, 
                    int UserTypeID, 
                    int UserStatusID, 
                    string FirstNameEn, 
                    string SecondNameEn, 
                    string ThirdNameEn, 
                    string LastNameEn, 
                    string FirstNameAr, 
                    string SecondNameAr, 
                    string ThirdNameAr, 
                    string LastNameAr, 
                    int CountryID, 
                    int CityID, 
                    int ReligionID, 
                    int NationalityID, 
                    string Tel, 
                    string Mobile, 
                    string Email, 
                    int OperationID, 
                    bool CanNotifyIssue, 
                    int JobTitleID, 
                    string Address, 
                    bool IsVIP)
        {
            return base.Channel.SaveBranchAccountUserAsync(AccountID, BranchID, CompanyID, UserID, Username, Password, MustChangePassword, CannotChangePassword, PasswordNeverExpires, remarks, Regdate, UserTypeID, UserStatusID, FirstNameEn, SecondNameEn, ThirdNameEn, LastNameEn, FirstNameAr, SecondNameAr, ThirdNameAr, LastNameAr, CountryID, CityID, ReligionID, NationalityID, Tel, Mobile, Email, OperationID, CanNotifyIssue, JobTitleID, Address, IsVIP);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllPausedAndNotSentIssueIDsAsync(int BranchID)
        {
            return base.Channel.GetAllPausedAndNotSentIssueIDsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task IssuePauseHistory_updateIsSentAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssuePauseHistory_updateIsSentAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssuePauseHistory_selectAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssuePauseHistory_selectAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetResolvedWithNoRateAsync(int BranchID)
        {
            return base.Channel.GetResolvedWithNoRateAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task IssueInfoRateNotifications_insertAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueInfoRateNotifications_insertAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ADOUMapping_SelectGridAsync(int DomainID, int BranchID, int Lang)
        {
            return base.Channel.ADOUMapping_SelectGridAsync(DomainID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<bool> GetSimpleModeFlagAsync(int UserID, int BranchID)
        {
            return base.Channel.GetSimpleModeFlagAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetServerNameAsync(int BranchID)
        {
            return base.Channel.GetServerNameAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task LogErrorAsync(string spname, string ErrDesc)
        {
            return base.Channel.LogErrorAsync(spname, ErrDesc);
        }
        
        public System.Threading.Tasks.Task<string> MenaITech_ReassignToFirstAssigneeWithPausedStatusAsync(string Refcode)
        {
            return base.Channel.MenaITech_ReassignToFirstAssigneeWithPausedStatusAsync(Refcode);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> HelloWorldAsync()
        {
            return base.Channel.HelloWorldAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<T.ConvertStreamToByteBufferResponse> T.IssueSoap.ConvertStreamToByteBufferAsync(T.ConvertStreamToByteBufferRequest request)
        {
            return base.Channel.ConvertStreamToByteBufferAsync(request);
        }
        
        public System.Threading.Tasks.Task<T.ConvertStreamToByteBufferResponse> ConvertStreamToByteBufferAsync(T.Stream theStream)
        {
            T.ConvertStreamToByteBufferRequest inValue = new T.ConvertStreamToByteBufferRequest();
            inValue.theStream = theStream;
            return ((T.IssueSoap)(this)).ConvertStreamToByteBufferAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<T.WriteBinarFileResponse> T.IssueSoap.WriteBinarFileAsync(T.WriteBinarFileRequest request)
        {
            return base.Channel.WriteBinarFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<T.WriteBinarFileResponse> WriteBinarFileAsync(int IssueID, byte[] FileName, string FileNamestr, int BranchID)
        {
            T.WriteBinarFileRequest inValue = new T.WriteBinarFileRequest();
            inValue.IssueID = IssueID;
            inValue.FileName = FileName;
            inValue.FileNamestr = FileNamestr;
            inValue.BranchID = BranchID;
            return ((T.IssueSoap)(this)).WriteBinarFileAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIDFromDomainInformationAsync(string UserName, string DomainName)
        {
            return base.Channel.GetUserIDFromDomainInformationAsync(UserName, DomainName);
        }
        
        public System.Threading.Tasks.Task<long> IssueInfoSaveAsync(
                    long IssID, 
                    int BranchID, 
                    int ProjectID, 
                    int SeverityID, 
                    int PriorityID, 
                    int IssueTypeID, 
                    int CreatedByUserID, 
                    int AssignToID, 
                    string issuetitle, 
                    string issueDescription, 
                    int CategoryID1, 
                    int CategoryID2, 
                    int CategoryID3, 
                    int CategoryID4, 
                    string SubmitDate, 
                    string ExpectedSolveDate, 
                    bool AddtoWatchList, 
                    int IssueStatusID, 
                    int IssueSubCategoryID, 
                    bool IsAssignToGroup, 
                    bool IsAccount, 
                    int AccountID, 
                    int ServiceID, 
                    int RecordTypeID, 
                    int PublishToKB, 
                    int RequestedByTypeID, 
                    int RequestedByUserID, 
                    int RequestedByAccountID, 
                    int AssetsType, 
                    int AssetsID, 
                    int ImpactID, 
                    int SubItemID, 
                    int Lang)
        {
            return base.Channel.IssueInfoSaveAsync(IssID, BranchID, ProjectID, SeverityID, PriorityID, IssueTypeID, CreatedByUserID, AssignToID, issuetitle, issueDescription, CategoryID1, CategoryID2, CategoryID3, CategoryID4, SubmitDate, ExpectedSolveDate, AddtoWatchList, IssueStatusID, IssueSubCategoryID, IsAssignToGroup, IsAccount, AccountID, ServiceID, RecordTypeID, PublishToKB, RequestedByTypeID, RequestedByUserID, RequestedByAccountID, AssetsType, AssetsID, ImpactID, SubItemID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueAttachmentsPAInsertAsync(long IssueID, long NewIssueID, int BranchID)
        {
            return base.Channel.IssueAttachmentsPAInsertAsync(IssueID, NewIssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task CM_AlertLog_InsertAsync(int AlertID, int BranchID, System.DateTime ActionDate, string ActionTextEn, string ActionTextAr, int ActionByUserID)
        {
            return base.Channel.CM_AlertLog_InsertAsync(AlertID, BranchID, ActionDate, ActionTextEn, ActionTextAr, ActionByUserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetListOfValuesAsync(int ListID, int BranchID, int Lang, int filter1, int filter2)
        {
            return base.Channel.GetListOfValuesAsync(ListID, BranchID, Lang, filter1, filter2);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_GetProjectFromComputerGroupAsync(int BranchID, int ComputerID)
        {
            return base.Channel.CM_GetProjectFromComputerGroupAsync(BranchID, ComputerID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectListForInternalsSelectAsync(int UserID, int BranchID, int Lang, int StatusID)
        {
            return base.Channel.ProjectListForInternalsSelectAsync(UserID, BranchID, Lang, StatusID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersTemplate_SelectByTemplateIDAsync(int TemplateID, int BranchID)
        {
            return base.Channel.CM_ComputersTemplate_SelectByTemplateIDAsync(TemplateID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_AlertIncidentDetails_SelectAllAsync(int AlertID, int BranchID, bool IsService)
        {
            return base.Channel.CM_AlertIncidentDetails_SelectAllAsync(AlertID, BranchID, IsService);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetDataSetFromListOfValuesTablesAsync(int TableID, int lang, int ID, int ID2)
        {
            return base.Channel.GetDataSetFromListOfValuesTablesAsync(TableID, lang, ID, ID2);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> ProjectListForAccountSelectAsync(int AccountID, int UserID, int BranchID, int Lang)
        {
            return base.Channel.ProjectListForAccountSelectAsync(AccountID, UserID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> BranchAccountsServices_selectHeadAsync(int AccountID, int BranchID, int Lang)
        {
            return base.Channel.BranchAccountsServices_selectHeadAsync(AccountID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> getIssueSubCategoriesAsync(int BranchID, int Lang, int MajorCategoryID, int orderby, int OrderByType)
        {
            return base.Channel.getIssueSubCategoriesAsync(BranchID, Lang, MajorCategoryID, orderby, OrderByType);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetDataSetAsync(string str1, T.CommandType type, T.SqlParameter[] parms)
        {
            return base.Channel.GetDataSetAsync(str1, type, parms);
        }
        
        public System.Threading.Tasks.Task<int> IssueSimpleModeSaveAsync(int BranchID, string IssueTitle, string IssueDescription, int PriorityID, string ExpectedSolveDate, string SubmitDate, int CreateByUserID, int ProjectID)
        {
            return base.Channel.IssueSimpleModeSaveAsync(BranchID, IssueTitle, IssueDescription, PriorityID, ExpectedSolveDate, SubmitDate, CreateByUserID, ProjectID);
        }
        
        public System.Threading.Tasks.Task IssueSimpleModeAdditionalFields_insertAsync(int FieldID, int IssueID, int BranchID, string Value)
        {
            return base.Channel.IssueSimpleModeAdditionalFields_insertAsync(FieldID, IssueID, BranchID, Value);
        }
        
        public System.Threading.Tasks.Task<int> GetProjectOwnerAsync(int ProjectID, int BranchID)
        {
            return base.Channel.GetProjectOwnerAsync(ProjectID, BranchID);
        }
        
        public System.Threading.Tasks.Task IssueHistoryInsertAsync(long IssueID, int BranchID, int ActionID, string ActionDate, string ActionTextEn, string ActionTextAr, int ActionByUserID, string ActionTimeDuration)
        {
            return base.Channel.IssueHistoryInsertAsync(IssueID, BranchID, ActionID, ActionDate, ActionTextEn, ActionTextAr, ActionByUserID, ActionTimeDuration);
        }
        
        public System.Threading.Tasks.Task IssueSimpleModeAttachmentsSaveAsync(int IssueID, int BranchID, string FileName, string Description)
        {
            return base.Channel.IssueSimpleModeAttachmentsSaveAsync(IssueID, BranchID, FileName, Description);
        }
        
        public System.Threading.Tasks.Task<string> IssueGetRefCodeFromIDAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueGetRefCodeFromIDAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task IssueNoteHistoryInsertAsync(long IssueID, int BranchID, int UserID, string title, string usernote, System.DateTime notedate, System.DateTime notetime, bool VisibleToExternals)
        {
            return base.Channel.IssueNoteHistoryInsertAsync(IssueID, BranchID, UserID, title, usernote, notedate, notetime, VisibleToExternals);
        }
        
        public System.Threading.Tasks.Task<long> GetIssueIDFromIssueRefCodeAsync(string RefCode, int BranchID)
        {
            return base.Channel.GetIssueIDFromIssueRefCodeAsync(RefCode, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UserPortalSettingsSelectAsync(int branchID, int UserID)
        {
            return base.Channel.UserPortalSettingsSelectAsync(branchID, UserID);
        }
        
        public System.Threading.Tasks.Task IssuesMustAddToOutlook_DeleteAsync(long IssueId, int userId, int BranchID)
        {
            return base.Channel.IssuesMustAddToOutlook_DeleteAsync(IssueId, userId, BranchID);
        }
        
        public System.Threading.Tasks.Task ResetFollowUpFlagAsync(int FollowUpID, long IssueID, int UserID, int BranchID)
        {
            return base.Channel.ResetFollowUpFlagAsync(FollowUpID, IssueID, UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetIssueStatusAsync(long IssueID, int BranchID)
        {
            return base.Channel.GetIssueStatusAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetIssueLanguageAsync(long IssueID, int BranchID, int Lang)
        {
            return base.Channel.GetIssueLanguageAsync(IssueID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> Crystelcall_GetAskRequestStatusAndActionTakenAsync(string Refcode, string Lang)
        {
            return base.Channel.Crystelcall_GetAskRequestStatusAndActionTakenAsync(Refcode, Lang);
        }
        
        public System.Threading.Tasks.Task<string> Crystelcall_NewAskRequestAsync(string CountryName, string Name, string Email, string Mobile, string EntityName, string TypeName, string Message, string FileName, string FileValue, string Lang)
        {
            return base.Channel.Crystelcall_NewAskRequestAsync(CountryName, Name, Email, Mobile, EntityName, TypeName, Message, FileName, FileValue, Lang);
        }
        
        public System.Threading.Tasks.Task IssueChangeStatusAsync(long IssueID, int BranchID, int newStatus)
        {
            return base.Channel.IssueChangeStatusAsync(IssueID, BranchID, newStatus);
        }
        
        public System.Threading.Tasks.Task IssueFixedByUserIDUpdateAsync(long IssueID, int branchID, int userID)
        {
            return base.Channel.IssueFixedByUserIDUpdateAsync(IssueID, branchID, userID);
        }
        
        public System.Threading.Tasks.Task IssueSolvingHistoryInsertAsync(long IssueID, int BranchID, string ActionTaken, System.DateTime SolveDate, string Notes, int SolvedByUserID)
        {
            return base.Channel.IssueSolvingHistoryInsertAsync(IssueID, BranchID, ActionTaken, SolveDate, Notes, SolvedByUserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssuesMustAddToOutlook_SelectAsync(int UserID, int BranchID)
        {
            return base.Channel.IssuesMustAddToOutlook_SelectAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueInfoForOutlookIntegrationAsync(long IssueId, int branchid)
        {
            return base.Channel.GetIssueInfoForOutlookIntegrationAsync(IssueId, branchid);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoViewSelectAsync(long IssueID, int BranchID, int Lang)
        {
            return base.Channel.IssueInfoViewSelectAsync(IssueID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueNotesHistorySelectAsync(long IssueID, int BranchID, int Lang, int UserType)
        {
            return base.Channel.IssueNotesHistorySelectAsync(IssueID, BranchID, Lang, UserType);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueHistorySelectAsync(long IssueID, int BranchID, int Lang)
        {
            return base.Channel.IssueHistorySelectAsync(IssueID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<string> GetIssueStatusDescAsync(long issueID, int BranchID)
        {
            return base.Channel.GetIssueStatusDescAsync(issueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueStatisticsViewSelectAsync(int BranchID, long IssueID, int Lang)
        {
            return base.Channel.IssueStatisticsViewSelectAsync(BranchID, IssueID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoFixAndOpenDateAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueInfoFixAndOpenDateAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetServerUrlReportAsync()
        {
            return base.Channel.GetServerUrlReportAsync();
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersFollowUpToBeImportedToOutlookAsync(int UserID, int BranchID)
        {
            return base.Channel.UsersFollowUpToBeImportedToOutlookAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueInfoForOutlookFollowUp_SelectAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueInfoForOutlookFollowUp_SelectAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> CM_GetComputerIDFromComputerNameAsync(string ComputerName, int BranchID)
        {
            return base.Channel.CM_GetComputerIDFromComputerNameAsync(ComputerName, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfo_ComputerSystem_SelectInfoAsync(int ComputerID, int BranchID, int Lang)
        {
            return base.Channel.CM_ComputersGeneralInfo_ComputerSystem_SelectInfoAsync(ComputerID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectTeamAsync(int ProjectID, int BranchID, int Lang, int TeamID)
        {
            return base.Channel.GetProjectTeamAsync(ProjectID, BranchID, Lang, TeamID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetProjectTeamGroupsAsync(int ProjectID, int BranchID, int Lang, int TeamID, int RequestorUserID)
        {
            return base.Channel.GetProjectTeamGroupsAsync(ProjectID, BranchID, Lang, TeamID, RequestorUserID);
        }
        
        public System.Threading.Tasks.Task<int> GetProjectIDFromIssueIDAsync(long IssueID, int BranchID)
        {
            return base.Channel.GetProjectIDFromIssueIDAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> GetIssueRecordTypeIDAsync(long IssueID, int BranchID)
        {
            return base.Channel.GetIssueRecordTypeIDAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task IssueChangeAssignToAsync(long IssueID, int BranchID, int AssignTo, bool IsAssignToGroup)
        {
            return base.Channel.IssueChangeAssignToAsync(IssueID, BranchID, AssignTo, IsAssignToGroup);
        }
        
        public System.Threading.Tasks.Task IssueChangeRecordTypeAsync(long IssueID, int BranchID, T.RecordTypes RecordTypeID)
        {
            return base.Channel.IssueChangeRecordTypeAsync(IssueID, BranchID, RecordTypeID);
        }
        
        public System.Threading.Tasks.Task IssueCopyToDeleteAsync(long IssueID, int BranchID)
        {
            return base.Channel.IssueCopyToDeleteAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task IssueCopyToInsertAsync(long IssueID, int BranchID, int UserID)
        {
            return base.Channel.IssueCopyToInsertAsync(IssueID, BranchID, UserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_PackageInfo_selectAsync(int PackageID, int BranchID)
        {
            return base.Channel.CM_PackageInfo_selectAsync(PackageID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CheckLoginInfoAsync(string Username, int serial, int SystemUserType)
        {
            return base.Channel.CheckLoginInfoAsync(Username, serial, SystemUserType);
        }
        
        public System.Threading.Tasks.Task<int> CheckLoginInfoWithNoDomainAsync(string Username, string Password, int BranchID)
        {
            return base.Channel.CheckLoginInfoWithNoDomainAsync(Username, Password, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserFullNameAsync(int UserID, int branchID, int lang, int UserTypeID)
        {
            return base.Channel.GetUserFullNameAsync(UserID, branchID, lang, UserTypeID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetOperatingSystemsAsync(int BranchID)
        {
            return base.Channel.GetOperatingSystemsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetVendorsAsync(int BranchID)
        {
            return base.Channel.GetVendorsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetUsersGroupsAsync(int BranchID, int UserID)
        {
            return base.Channel.GetUsersGroupsAsync(BranchID, UserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ADSettings_selectInfoAsync(int Lang, int BranchID)
        {
            return base.Channel.CM_ADSettings_selectInfoAsync(Lang, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> CM_GetDomainPasswordAsync(int DomainID, int BranchID)
        {
            return base.Channel.CM_GetDomainPasswordAsync(DomainID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfo_SelectHeadAsync(int DomainID, int BranchID, int Lang)
        {
            return base.Channel.CM_ComputersGeneralInfo_SelectHeadAsync(DomainID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGroupsMembersSelectAsync(int GroupID, int BranchID, int Lang)
        {
            return base.Channel.CM_ComputersGroupsMembersSelectAsync(GroupID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfoSelect_OSAsync(int OSID, int BranchID, int Lang)
        {
            return base.Channel.CM_ComputersGeneralInfoSelect_OSAsync(OSID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfoSelect_vendorAsync(int VendorID, int BranchID, int Lang)
        {
            return base.Channel.CM_ComputersGeneralInfoSelect_vendorAsync(VendorID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ADSettings_selectAsync(int DomainID, int BranchID)
        {
            return base.Channel.CM_ADSettings_selectAsync(DomainID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> CM_GetComputerIDFromGUIDAsync(int BranchID, int DomainID, string GUID)
        {
            return base.Channel.CM_GetComputerIDFromGUIDAsync(BranchID, DomainID, GUID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_ComputersGeneralInfoSelect_ForPcsAsync(int DomainID, int BranchID, int lang, string ComputersStr)
        {
            return base.Channel.CM_ComputersGeneralInfoSelect_ForPcsAsync(DomainID, BranchID, lang, ComputersStr);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_GetPackagesListAsync(int BranchID)
        {
            return base.Channel.CM_GetPackagesListAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_GetPackageVersionsListAsync(int PackageID, int BranchID)
        {
            return base.Channel.CM_GetPackageVersionsListAsync(PackageID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_PackageVersionInfo_selectAsync(int PackageID, int VersionID, int BranchID)
        {
            return base.Channel.CM_PackageVersionInfo_selectAsync(PackageID, VersionID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_AntivirusSettings_selectAsync()
        {
            return base.Channel.CM_AntivirusSettings_selectAsync();
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CM_SearchPcsAsync(int BranchID, string PCName, string IPAddress)
        {
            return base.Channel.CM_SearchPcsAsync(BranchID, PCName, IPAddress);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetDataSetForCodesTablesAsync(int TableID, int lang, int OrderByID, int OrderByType, int branchID)
        {
            return base.Channel.GetDataSetForCodesTablesAsync(TableID, lang, OrderByID, OrderByType, branchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> VisualModeRulesselectHeaderAsync(int BranchID, int Lang)
        {
            return base.Channel.VisualModeRulesselectHeaderAsync(BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetDictionaryItemsWithIDsAsync(int Lang, int[] IDs)
        {
            return base.Channel.GetDictionaryItemsWithIDsAsync(Lang, IDs);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> VisualModeIssuesViewerAsync(int MajorID, int SubCategoryID, int Lang, int BranchID)
        {
            return base.Channel.VisualModeIssuesViewerAsync(MajorID, SubCategoryID, Lang, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> VisualModeRulesSelectAsync(int BranchID, int RuleID)
        {
            return base.Channel.VisualModeRulesSelectAsync(BranchID, RuleID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetVisualModeIssueAsync(int PreIssueID, int BranchID)
        {
            return base.Channel.GetVisualModeIssueAsync(PreIssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> DashboardsAreasInformation_selectAllAsync(int DashboardID, int UserID, int BranchID)
        {
            return base.Channel.DashboardsAreasInformation_selectAllAsync(DashboardID, UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> DashboardsAreasInformation_selectAsync(int AreaID, int DashboardID, int UserID, int BranchId)
        {
            return base.Channel.DashboardsAreasInformation_selectAsync(AreaID, DashboardID, UserID, BranchId);
        }
        
        public System.Threading.Tasks.Task<string> DashboardsAreasInformation_GenerateSQLStatementAsync(int AreaID, int DashboardID, int UserID, int BranchId, int Lang)
        {
            return base.Channel.DashboardsAreasInformation_GenerateSQLStatementAsync(AreaID, DashboardID, UserID, BranchId, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetChartAsync(int AreaID, int DashboardID, int UserID, int BranchID)
        {
            return base.Channel.GetChartAsync(AreaID, DashboardID, UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetServerNameSettingsAsync(int BranchID)
        {
            return base.Channel.GetServerNameSettingsAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueAdditionlFieldsSelectAsync(int branchID, int Lang, int ProjectID, int ServiceID, int CategoryID, int SubCategoryID)
        {
            return base.Channel.IssueAdditionlFieldsSelectAsync(branchID, Lang, ProjectID, ServiceID, CategoryID, SubCategoryID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> IssueAdditionlFieldValuesSelectAsync(int branchID, int fieldID, int lang)
        {
            return base.Channel.IssueAdditionlFieldValuesSelectAsync(branchID, fieldID, lang);
        }
        
        public System.Threading.Tasks.Task IssueAdditionalFieldsInsertAsync(long IssueID, int BranchID, int FieldID, string value)
        {
            return base.Channel.IssueAdditionalFieldsInsertAsync(IssueID, BranchID, FieldID, value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<T.IssueAttachmentsInsertResponse> T.IssueSoap.IssueAttachmentsInsertAsync(T.IssueAttachmentsInsertRequest request)
        {
            return base.Channel.IssueAttachmentsInsertAsync(request);
        }
        
        public System.Threading.Tasks.Task<T.IssueAttachmentsInsertResponse> IssueAttachmentsInsertAsync(byte[] File, long IssueID, int BranchID, string AttachPath, string FileName, string FileDescription, int SubmitByUserID, string SubmitDate)
        {
            T.IssueAttachmentsInsertRequest inValue = new T.IssueAttachmentsInsertRequest();
            inValue.File = File;
            inValue.IssueID = IssueID;
            inValue.BranchID = BranchID;
            inValue.AttachPath = AttachPath;
            inValue.FileName = FileName;
            inValue.FileDescription = FileDescription;
            inValue.SubmitByUserID = SubmitByUserID;
            inValue.SubmitDate = SubmitDate;
            return ((T.IssueSoap)(this)).IssueAttachmentsInsertAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetAllImpactAsync(int BranchID, int Lang)
        {
            return base.Channel.GetAllImpactAsync(BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetImpactFromMatrixAsync(int BranchID, int UrgencyID, int ImpactID)
        {
            return base.Channel.GetImpactFromMatrixAsync(BranchID, UrgencyID, ImpactID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> CRM_GetListOfValuesAsync(int ListID, int BranchID, int Lang, int filter1, int filter2)
        {
            return base.Channel.CRM_GetListOfValuesAsync(ListID, BranchID, Lang, filter1, filter2);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemDateAsync()
        {
            return base.Channel.GetSystemDateAsync();
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PM_CheckNewTasks_OnwerAsync(int Lang, int OwnerID, int BranchID)
        {
            return base.Channel.PM_CheckNewTasks_OnwerAsync(Lang, OwnerID, BranchID);
        }
        
        public System.Threading.Tasks.Task PMUsersTasks_UpdateSynchOwnerStatusAsync(int TaskID, int BranchID)
        {
            return base.Channel.PMUsersTasks_UpdateSynchOwnerStatusAsync(TaskID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PM_CheckNewTasks_UserAsync(int Lang, int OwnerID, int BranchID)
        {
            return base.Channel.PM_CheckNewTasks_UserAsync(Lang, OwnerID, BranchID);
        }
        
        public System.Threading.Tasks.Task PMUsersTasks_UpdateSynchUserStatusAsync(int TaskID, int BranchID)
        {
            return base.Channel.PMUsersTasks_UpdateSynchUserStatusAsync(TaskID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetServiceCategoriesAsync(int ServiceID, int BranchID, int Lang)
        {
            return base.Channel.GetServiceCategoriesAsync(ServiceID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetIssueDispatchInfoAsync(long IssueID, int BranchID)
        {
            return base.Channel.GetIssueDispatchInfoAsync(IssueID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRuleNotifyEmailsSelectAsync(int RuleID, int BranchID, int UserID)
        {
            return base.Channel.UsersRuleNotifyEmailsSelectAsync(RuleID, BranchID, UserID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRuleCCsEmailsSelectAsync(int RuleID, int BranchID, int UserID)
        {
            return base.Channel.UsersRuleCCsEmailsSelectAsync(RuleID, BranchID, UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetEmployeeFullNameFromUserIDAsync(int UserID, int BranchID, int Lang)
        {
            return base.Channel.GetEmployeeFullNameFromUserIDAsync(UserID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRulesGroupsSelectAsync(long RuleID, int BranchID, int GroupID)
        {
            return base.Channel.UsersRulesGroupsSelectAsync(RuleID, BranchID, GroupID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> UsersRulesAssigneeSelectAsync(long RuleID, int BranchID, int UserID)
        {
            return base.Channel.UsersRulesAssigneeSelectAsync(RuleID, BranchID, UserID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDictionaryItemsAsync(int lang, int BranchID)
        {
            return base.Channel.GetDictionaryItemsAsync(lang, BranchID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserEmailFromUserIDAsync(int UserID, int BranchID)
        {
            return base.Channel.GetUserEmailFromUserIDAsync(UserID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> GetBranchInfoAsync(int BranchID)
        {
            return base.Channel.GetBranchInfoAsync(BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PMGeneralInfo_selectAsync(int PMID, int BranchID)
        {
            return base.Channel.PMGeneralInfo_selectAsync(PMID, BranchID);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PMEmployeeAssets_selectViewAsync(int PMID, int BranchID, int Lang)
        {
            return base.Channel.PMEmployeeAssets_selectViewAsync(PMID, BranchID, Lang);
        }
        
        public System.Threading.Tasks.Task UpdateLastSynchDateAsync(int PMID, int BranchID)
        {
            return base.Channel.UpdateLastSynchDateAsync(PMID, BranchID);
        }
        
        public System.Threading.Tasks.Task<int> PMUsersTasks_insertAsync(int TaskID, int BranchID, int OwnerID, int UserID, int AssetID, string Note, System.DateTime Time, string Comments, int StatusID, int AssetType)
        {
            return base.Channel.PMUsersTasks_insertAsync(TaskID, BranchID, OwnerID, UserID, AssetID, Note, Time, Comments, StatusID, AssetType);
        }
        
        public System.Threading.Tasks.Task<T.ArrayOfXElement> PMSelectedChecklistItems_selectAllAsync(int PMID, int BranchID)
        {
            return base.Channel.PMSelectedChecklistItems_selectAllAsync(PMID, BranchID);
        }
        
        public System.Threading.Tasks.Task PMTasksChecklistItems_insertAsync(int TaskID, int BranchID, int ItemID)
        {
            return base.Channel.PMTasksChecklistItems_insertAsync(TaskID, BranchID, ItemID);
        }
        
        public System.Threading.Tasks.Task IssueFollowUp_DeleteAsync(int followUpID, int UserID, long IssueID, int BranchID)
        {
            return base.Channel.IssueFollowUp_DeleteAsync(followUpID, UserID, IssueID, BranchID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.IssueSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.IssueSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.IssueSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.91.24/xml/issue.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.IssueSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.91.24/xml/issue.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            IssueSoap,
            
            IssueSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.3.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
